{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-c-extensions/","result":{"data":{"site":{"siteMetadata":{"title":"Python para impacientes"}},"markdownRemark":{"id":"a83d3110-938b-59ab-8e2c-c3dea5af6bf4","excerpt":"Occasionally, it is unavoidable for pythoneers to write a C extension.\nFor example, porting C libraries or new system calls to Python requires\nto implement newâ€¦","html":"<h1></h1>\n<p>Occasionally, it is unavoidable for pythoneers to write a C extension.\nFor example, porting C libraries or new system calls to Python requires\nto implement new object types through C extension. In order to provide a\nbrief glance on how C extension works. This cheat sheet mainly focuses\non writing a Python C extension.</p>\n<p>Note that the C extension interface is specific to official CPython. It\nis likely that extension modules do not work on other Python\nimplementations such as <a href=\"https://pypy.org/\">PyPy</a>. Even if official\nCPython, the Python C API may be not compatible with different versions,\ne.g., Python2 and Python3. Therefore, if extension modules are\nconsidered to be run on other Python interpreters, it would be better to\nuse <a href=\"https://docs.python.org/3/library/ctypes.html\">ctypes</a> module or\n<a href=\"https://cffi.readthedocs.io/en/latest/\">cffi</a>.</p>\n<h2>Simple setup.py</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> distutils<span class=\"token punctuation\">.</span>core <span class=\"token keyword\">import</span> setup<span class=\"token punctuation\">,</span> Extension\n\next <span class=\"token operator\">=</span> Extension<span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> sources<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'foo.c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nsetup<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"Foo\"</span><span class=\"token punctuation\">,</span> version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">,</span> ext_modules<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>ext<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Customize CFLAGS</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sysconfig\n<span class=\"token keyword\">from</span> distutils<span class=\"token punctuation\">.</span>core <span class=\"token keyword\">import</span> setup<span class=\"token punctuation\">,</span> Extension\n\ncflags <span class=\"token operator\">=</span> sysconfig<span class=\"token punctuation\">.</span>get_config_var<span class=\"token punctuation\">(</span><span class=\"token string\">\"CFLAGS\"</span><span class=\"token punctuation\">)</span>\n\nextra_compile_args <span class=\"token operator\">=</span> cflags<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nextra_compile_args <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"-Wextra\"</span><span class=\"token punctuation\">]</span>\n\next <span class=\"token operator\">=</span> Extension<span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"foo.c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    extra_compile_args<span class=\"token operator\">=</span>extra_compile_args\n<span class=\"token punctuation\">)</span>\n\nsetup<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">,</span> ext_modules<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>ext<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Doc String</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">PyDoc_STRVAR(doc_mod, &quot;Module document\\n&quot;);\nPyDoc_STRVAR(doc_foo, &quot;foo() -&gt; None\\n\\nFoo doc&quot;);\n\nstatic PyMethodDef methods[] = {\n    {&quot;foo&quot;, (PyCFunction)foo, METH_NOARGS, doc_foo},\n    {NULL, NULL, 0, NULL}\n};\n\nstatic struct PyModuleDef module = {\n    .m_base    = PyModuleDef_HEAD_INIT,\n    .m_name    = &quot;Foo&quot;,\n    .m_doc     = doc_mod,\n    .m_size    = -1,\n    .m_methods = methods\n};</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Simple C Extension</h2>\n<p>foo.c</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;Python.h&gt;\n\nPyDoc_STRVAR(doc_mod, &quot;Module document\\n&quot;);\nPyDoc_STRVAR(doc_foo, &quot;foo() -&gt; None\\n\\nFoo doc&quot;);\n\nstatic PyObject* foo(PyObject* self)\n{\n    PyObject* s = PyUnicode_FromString(&quot;foo&quot;);\n    PyObject_Print(s, stdout, 0);\n    Py_RETURN_NONE;\n}\n\nstatic PyMethodDef methods[] = {\n    {&quot;foo&quot;, (PyCFunction)foo, METH_NOARGS, doc_foo},\n    {NULL, NULL, 0, NULL}\n};\n\nstatic struct PyModuleDef module = {\n    PyModuleDef_HEAD_INIT, &quot;Foo&quot;, doc_mod, -1, methods\n};\n\nPyMODINIT_FUNC PyInit_foo(void)\n{\n    return PyModule_Create(&amp;module);\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python setup.py -q build\n$ python setup.py -q <span class=\"token function\">install</span>\n$ python -c <span class=\"token string\">\"import foo; foo.foo()\"</span>\n<span class=\"token string\">'foo'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Release the GIL</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;Python.h&gt;\n\nstatic PyObject* foo(PyObject* self)\n{\n    Py_BEGIN_ALLOW_THREADS\n    sleep(3);\n    Py_END_ALLOW_THREADS\n    Py_RETURN_NONE;\n}\n\nstatic PyMethodDef methods[] = {\n    {&quot;foo&quot;, (PyCFunction)foo, METH_NOARGS, NULL},\n    {NULL, NULL, 0, NULL}\n};\n\nstatic struct PyModuleDef module = {\n    PyModuleDef_HEAD_INIT, &quot;Foo&quot;, NULL, -1, methods\n};\n\nPyMODINIT_FUNC PyInit_foo(void)\n{\n    return PyModule_Create(&amp;module);\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python setup.py -q build\n$ python setup.py -q <span class=\"token function\">install</span>\n$ python -c <span class=\"token string\">\"\n> import threading\n> import foo\n> from datetime import datetime\n> def f(n):\n>     now = datetime.now()\n>     print(f'{now}: thread {n}')\n>     foo.foo()\n> ts = [threading.Thread(target=f, args=(n,)) for n in range(3)]\n> [t.start() for t in ts]\n> [t.join() for t in ts]\"</span>\n<span class=\"token number\">2018</span>-11-04 <span class=\"token number\">20</span>:15:34.860454: thread <span class=\"token number\">0</span>\n<span class=\"token number\">2018</span>-11-04 <span class=\"token number\">20</span>:15:34.860592: thread <span class=\"token number\">1</span>\n<span class=\"token number\">2018</span>-11-04 <span class=\"token number\">20</span>:15:34.860705: thread <span class=\"token number\">2</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In C extension, blocking I/O should be inserted into a block which is\nwrapped by <code class=\"language-text\">Py_BEGIN_ALLOW_THREADS</code> and <code class=\"language-text\">Py_END_ALLOW_THREADS</code> for\nreleasing the GIL temporarily; Otherwise, a blocking I/O operation has\nto wait until previous operation finish. For example</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;Python.h&gt;\n\nstatic PyObject* foo(PyObject* self)\n{\n    sleep(3);\n    Py_RETURN_NONE;\n}\n\nstatic PyMethodDef methods[] = {\n    {&quot;foo&quot;, (PyCFunction)foo, METH_NOARGS, NULL},\n    {NULL, NULL, 0, NULL}\n};\n\nstatic struct PyModuleDef module = {\n    PyModuleDef_HEAD_INIT, &quot;Foo&quot;, NULL, -1, methods\n};\n\nPyMODINIT_FUNC PyInit_foo(void)\n{\n    return PyModule_Create(&amp;module);\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python -c <span class=\"token string\">\"\n> import threading\n> import foo\n> from datetime import datetime\n> def f(n):\n>     now = datetime.now()\n>     print(f'{now}: thread {n}')\n>     foo.foo()\n> ts = [threading.Thread(target=f, args=(n,)) for n in range(3)]\n> [t.start() for t in ts]\n> [t.join() for t in ts]\"</span>\n<span class=\"token number\">2018</span>-11-04 <span class=\"token number\">20</span>:16:44.055932: thread <span class=\"token number\">0</span>\n<span class=\"token number\">2018</span>-11-04 <span class=\"token number\">20</span>:16:47.059718: thread <span class=\"token number\">1</span>\n<span class=\"token number\">2018</span>-11-04 <span class=\"token number\">20</span>:16:50.063579: thread <span class=\"token number\">2</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"admonition warning\">\n<p>The GIL can only be safely released when there is <strong>NO</strong> Python C API\nfunctions between <code class=\"language-text\">Py_BEGIN_ALLOW_THREADS</code> and <code class=\"language-text\">Py_END_ALLOW_THREADS</code>.</p>\n</div>\n<h2>Acquire the GIL</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;pthread.h&gt;\n#include &lt;Python.h&gt;\n\ntypedef struct {\n    PyObject *sec;\n    PyObject *py_callback;\n} foo_args;\n\nvoid *\nfoo_thread(void *args)\n{\n    long n = -1;\n    PyObject *rv = NULL, *sec = NULL,* py_callback = NULL;\n    foo_args *a = NULL;\n\n    if (!args)\n        return NULL;\n\n    a = (foo_args *)args;\n    sec = a-&gt;sec;\n    py_callback = a-&gt;py_callback;\n\n    n = PyLong_AsLong(sec);\n    if ((n == -1) &amp;&amp; PyErr_Occurred()) {\n        return NULL;\n    }\n\n    sleep(n);  // slow task\n\n    // acquire the GIL\n    PyGILState_STATE state = PyGILState_Ensure();\n    rv = PyObject_CallFunction(py_callback, &quot;s&quot;, &quot;Awesome Python!&quot;);\n    // release the GIL\n    PyGILState_Release(state);\n    Py_XDECREF(rv);\n    return NULL;\n}\n\nstatic PyObject *\nfoo(PyObject *self, PyObject *args)\n{\n    long i = 0, n = 0;\n    pthread_t *arr = NULL;\n    PyObject *py_callback = NULL;\n    PyObject *sec = NULL, *num = NULL;\n    PyObject *rv = NULL;\n    foo_args a = {};\n\n    if (!PyArg_ParseTuple(args, &quot;OOO:callback&quot;, &amp;num, &amp;sec, &amp;py_callback))\n        return NULL;\n\n    // allow releasing GIL\n    Py_BEGIN_ALLOW_THREADS\n\n    if (!PyLong_Check(sec) || !PyLong_Check(num)) {\n        PyErr_SetString(PyExc_TypeError, &quot;should be int&quot;);\n        goto error;\n    }\n\n    if (!PyCallable_Check(py_callback)) {\n        PyErr_SetString(PyExc_TypeError, &quot;should be callable&quot;);\n        goto error;\n    }\n\n    n = PyLong_AsLong(num);\n    if (n == -1 &amp;&amp; PyErr_Occurred())\n        goto error;\n\n    arr = (pthread_t *)PyMem_RawCalloc(n, sizeof(pthread_t));\n    if (!arr)\n        goto error;\n\n    a.sec = sec;\n    a.py_callback = py_callback;\n    for (i = 0; i &lt; n; i++) {\n        if (pthread_create(&amp;arr[i], NULL, foo_thread, &amp;a)) {\n            PyErr_SetString(PyExc_TypeError, &quot;create a thread failed&quot;);\n            goto error;\n        }\n    }\n\n    for (i = 0; i &lt; n; i++) {\n        if (pthread_join(arr[i], NULL)) {\n            PyErr_SetString(PyExc_TypeError, &quot;thread join failed&quot;);\n            goto error;\n        }\n    }\n    Py_XINCREF(Py_None);\n    rv = Py_None;\nerror:\n    PyMem_RawFree(arr);\n    Py_XDECREF(sec);\n    Py_XDECREF(num);\n    Py_XDECREF(py_callback);\n    // restore GIL\n    Py_END_ALLOW_THREADS\n    return rv;\n}\n\nstatic PyMethodDef methods[] = {\n    {&quot;foo&quot;, (PyCFunction)foo, METH_VARARGS, NULL},\n    {NULL, NULL, 0, NULL}\n};\n\nstatic struct PyModuleDef module = {\n    PyModuleDef_HEAD_INIT, &quot;foo&quot;, NULL, -1, methods\n};\n\nPyMODINIT_FUNC PyInit_foo(void)\n{\n    return PyModule_Create(&amp;module);\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python setup.py -q build\n$ python setup.py -q <span class=\"token function\">install</span>\n$ pyton -q\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token function\">import</span> foo\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> from datetime <span class=\"token function\">import</span> datetime\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> def cb<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>:\n<span class=\"token punctuation\">..</span>.     now <span class=\"token operator\">=</span> datetime.now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">..</span>.     print<span class=\"token punctuation\">(</span>f<span class=\"token string\">'{now}: {s}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">..</span>.\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo.foo<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token number\">1</span>, cb<span class=\"token punctuation\">)</span>\n<span class=\"token number\">2018</span>-11-05 09:33:50.642543: Awesome Python<span class=\"token operator\">!</span>\n<span class=\"token number\">2018</span>-11-05 09:33:50.642634: Awesome Python<span class=\"token operator\">!</span>\n<span class=\"token number\">2018</span>-11-05 09:33:50.642672: Awesome Python<span class=\"token operator\">!</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>If threads are created from C/C++, those threads do not hold the GIL.\nWithout acquiring the GIL, the interpreter cannot access Python\nfunctions safely. For example</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">void *\nfoo_thread(void *args)\n{\n    ...\n    // without acquiring the GIL\n    rv = PyObject_CallFunction(py_callback, &quot;s&quot;, &quot;Awesome Python!&quot;);\n    Py_XDECREF(rv);\n    return NULL;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token function\">import</span> foo\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> from datetime <span class=\"token function\">import</span> datetime\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> def cb<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>:\n<span class=\"token punctuation\">..</span>.     now <span class=\"token operator\">=</span> datetime.now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">..</span>.     print<span class=\"token punctuation\">(</span>f<span class=\"token string\">\"{now}: {s}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">..</span>.\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo.foo<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">1</span>, cb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>    <span class=\"token number\">8590</span> segmentation fault  python -q</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"admonition warning\">\n<p>In order to call python function safely, we can simply warp <strong>Python\nFunctions</strong> between <code class=\"language-text\">PyGILState_Ensure</code> and <code class=\"language-text\">PyGILState_Release</code> in C\nextension code.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">PyGILState_STATE state = PyGILState_Ensure();\n// Perform Python actions\nresult = PyObject_CallFunction(callback)\n// Error handling\nPyGILState_Release(state);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</div>\n<h2>Get Reference Count</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;Python.h&gt;\n\nstatic PyObject *\ngetrefcount(PyObject *self, PyObject *a)\n{\n    return PyLong_FromSsize_t(Py_REFCNT(a));\n}\n\nstatic PyMethodDef methods[] = {\n    {&quot;getrefcount&quot;, (PyCFunction)getrefcount, METH_O, NULL},\n    {NULL, NULL, 0, NULL}\n};\n\nstatic struct PyModuleDef module = {\n    PyModuleDef_HEAD_INIT, &quot;foo&quot;, NULL, -1, methods\n};\n\nPyMODINIT_FUNC PyInit_foo(void)\n{\n    return PyModule_Create(&amp;module);\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python setup.py -q build\n$ python setup.py -q <span class=\"token function\">install</span>\n$ python -q\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token function\">import</span> sys\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token function\">import</span> foo\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">2</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> sys.getrefcount<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">104</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo.getrefcount<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">104</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> sys.getrefcount<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">105</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo.getrefcount<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">105</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Parse Arguments</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;Python.h&gt;\n\nstatic PyObject *\nfoo(PyObject *self)\n{\n    Py_RETURN_NONE;\n}\n\nstatic PyObject *\nbar(PyObject *self, PyObject *arg)\n{\n    return Py_BuildValue(&quot;O&quot;, arg);\n}\n\nstatic PyObject *\nbaz(PyObject *self, PyObject *args)\n{\n    PyObject *x = NULL, *y = NULL;\n    if (!PyArg_ParseTuple(args, &quot;OO&quot;, &amp;x, &amp;y)) {\n        return NULL;\n    }\n    return Py_BuildValue(&quot;OO&quot;, x, y);\n}\n\nstatic PyObject *\nqux(PyObject *self, PyObject *args, PyObject *kwargs)\n{\n    static char *keywords[] = {&quot;x&quot;, &quot;y&quot;, NULL};\n    PyObject *x = NULL, *y = NULL;\n    if (!PyArg_ParseTupleAndKeywords(args, kwargs,\n                                     &quot;O|O&quot;, keywords,\n                                     &amp;x, &amp;y))\n    {\n        return NULL;\n    }\n    if (!y) {\n        y = Py_None;\n    }\n    return Py_BuildValue(&quot;OO&quot;, x, y);\n}\n\nstatic PyMethodDef methods[] = {\n    {&quot;foo&quot;, (PyCFunction)foo, METH_NOARGS, NULL},\n    {&quot;bar&quot;, (PyCFunction)bar, METH_O, NULL},\n    {&quot;baz&quot;, (PyCFunction)baz, METH_VARARGS, NULL},\n    {&quot;qux&quot;, (PyCFunction)qux, METH_VARARGS | METH_KEYWORDS, NULL},\n    {NULL, NULL, 0, NULL}\n};\n\nstatic struct PyModuleDef module = {\n    PyModuleDef_HEAD_INIT, &quot;foo&quot;, NULL, -1, methods\n};\n\nPyMODINIT_FUNC PyInit_foo(void)\n{\n    return PyModule_Create(&amp;module);\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python setup.py -q build\n$ python setup.py -q <span class=\"token function\">install</span>\n$ python -q\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token function\">import</span> foo\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo.foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo.bar<span class=\"token punctuation\">(</span><span class=\"token number\">3.7</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">3.7</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo.baz<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo.qux<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo.qux<span class=\"token punctuation\">(</span>x<span class=\"token operator\">=</span><span class=\"token number\">3</span>, <span class=\"token assign-left variable\">y</span><span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo.qux<span class=\"token punctuation\">(</span>x<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, None<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Calling Python Functions</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;Python.h&gt;\n\nstatic PyObject *\nfoo(PyObject *self, PyObject *args)\n{\n    PyObject *py_callback = NULL;\n    PyObject *rv = NULL;\n\n    if (!PyArg_ParseTuple(args, &quot;O:callback&quot;, &amp;py_callback))\n        return NULL;\n\n    if (!PyCallable_Check(py_callback)) {\n        PyErr_SetString(PyExc_TypeError, &quot;should be callable&quot;);\n        return NULL;\n    }\n\n    // Make sure we own the GIL\n    PyGILState_STATE state = PyGILState_Ensure();\n    // similar to py_callback(&quot;Awesome Python!&quot;)\n    rv = PyObject_CallFunction(py_callback, &quot;s&quot;, &quot;Awesome Python!&quot;);\n    // Restore previous GIL state\n    PyGILState_Release(state);\n    return rv;\n}\n\nstatic PyMethodDef methods[] = {\n    {&quot;foo&quot;, (PyCFunction)foo, METH_VARARGS, NULL},\n    {NULL, NULL, 0, NULL}\n};\n\nstatic struct PyModuleDef module = {\n    PyModuleDef_HEAD_INIT, &quot;foo&quot;, NULL, -1, methods\n};\n\nPyMODINIT_FUNC PyInit_foo(void)\n{\n    return PyModule_Create(&amp;module);\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python setup.py -q build\n$ python setup.py -q <span class=\"token function\">install</span>\n$ python -c <span class=\"token string\">\"import foo; foo.foo(print)\"</span>\nAwesome Python<span class=\"token operator\">!</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Raise Exception</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;Python.h&gt;\n\nPyDoc_STRVAR(doc_mod, &quot;Module document\\n&quot;);\nPyDoc_STRVAR(doc_foo, &quot;foo() -&gt; None\\n\\nFoo doc&quot;);\n\nstatic PyObject*\nfoo(PyObject* self)\n{\n    // raise NotImplementedError\n    PyErr_SetString(PyExc_NotImplementedError, &quot;Not implemented&quot;);\n    return NULL;\n}\n\nstatic PyMethodDef methods[] = {\n    {&quot;foo&quot;, (PyCFunction)foo, METH_NOARGS, doc_foo},\n    {NULL, NULL, 0, NULL}\n};\n\nstatic struct PyModuleDef module = {\n    PyModuleDef_HEAD_INIT, &quot;Foo&quot;, doc_mod, -1, methods\n};\n\nPyMODINIT_FUNC PyInit_foo(void)\n{\n    return PyModule_Create(&amp;module);\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python setup.py -q build\n$ python setup.py -q <span class=\"token function\">install</span>\n$ python -c <span class=\"token string\">\"import foo; foo.foo(print)\"</span>\n$ python -c <span class=\"token string\">\"import foo; foo.foo()\"</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"&lt;string>\"</span>, line <span class=\"token number\">1</span>, <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\nNotImplementedError: Not implemented</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Customize Exception</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;stdio.h&gt;\n#include &lt;Python.h&gt;\n\nstatic PyObject *FooError;\n\nPyDoc_STRVAR(doc_foo, &quot;foo() -&gt; void\\n\\n&quot;\n    &quot;Equal to the following example:\\n\\n&quot;\n    &quot;def foo():\\n&quot;\n    &quot;    raise FooError(\\&quot;Raise exception in C\\&quot;)&quot;\n);\n\nstatic PyObject *\nfoo(PyObject *self __attribute__((unused)))\n{\n    PyErr_SetString(FooError, &quot;Raise exception in C&quot;);\n    return NULL;\n}\n\nstatic PyMethodDef methods[] = {\n    {&quot;foo&quot;, (PyCFunction)foo, METH_NOARGS, doc_foo},\n    {NULL, NULL, 0, NULL}\n};\n\nstatic struct PyModuleDef module = {\n    PyModuleDef_HEAD_INIT, &quot;foo&quot;, &quot;doc&quot;, -1, methods\n};\n\nPyMODINIT_FUNC PyInit_foo(void)\n{\n    PyObject *m = NULL;\n    m = PyModule_Create(&amp;module);\n    if (!m) return NULL;\n\n    FooError = PyErr_NewException(&quot;foo.FooError&quot;, NULL, NULL);\n    Py_INCREF(FooError);\n    PyModule_AddObject(m, &quot;FooError&quot;, FooError);\n    return m;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python setup.py -q build\n$ python setup.py -q <span class=\"token function\">install</span>\n$ python -c <span class=\"token string\">\"import foo; foo.foo()\"</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"&lt;string>\"</span>, line <span class=\"token number\">1</span>, <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\nfoo.FooError: Raise exception <span class=\"token keyword\">in</span> C</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Iterate a List</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;Python.h&gt;\n\n#define PY_PRINTF(o) \\\n    PyObject_Print(o, stdout, 0); printf(&quot;\\n&quot;);\n\nstatic PyObject *\niter_list(PyObject *self, PyObject *args)\n{\n    PyObject *list = NULL, *item = NULL, *iter = NULL;\n    PyObject *result = NULL;\n\n    if (!PyArg_ParseTuple(args, &quot;O&quot;, &amp;list))\n        goto error;\n\n    if (!PyList_Check(list))\n        goto error;\n\n    // Get iterator\n    iter = PyObject_GetIter(list);\n    if (!iter)\n        goto error;\n\n    // for i in arr: print(i)\n    while ((item = PyIter_Next(iter)) != NULL) {\n        PY_PRINTF(item);\n        Py_XDECREF(item);\n    }\n\n    Py_XINCREF(Py_None);\n    result = Py_None;\nerror:\n    Py_XDECREF(iter);\n    return result;\n}\n\nstatic PyMethodDef methods[] = {\n    {&quot;iter_list&quot;, (PyCFunction)iter_list, METH_VARARGS, NULL},\n    {NULL, NULL, 0, NULL}\n};\n\nstatic struct PyModuleDef module = {\n    PyModuleDef_HEAD_INIT, &quot;foo&quot;, NULL, -1, methods\n};\n\nPyMODINIT_FUNC PyInit_foo(void)\n{\n    return PyModule_Create(&amp;module);\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python setup.py -q build\n$ python setup.py -q <span class=\"token function\">install</span>\n$ python -c <span class=\"token string\">\"import foo; foo.iter_list([1,2,3])\"</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Iterate a Dictionary</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;Python.h&gt;\n\n#define PY_PRINTF(o) \\\n    PyObject_Print(o, stdout, 0); printf(&quot;\\n&quot;);\n\nstatic PyObject *\niter_dict(PyObject *self, PyObject *args)\n{\n    PyObject *dict = NULL;\n    PyObject *key = NULL, *val = NULL;\n    PyObject *o = NULL, *result = NULL;\n    Py_ssize_t pos = 0;\n\n    if (!PyArg_ParseTuple(args, &quot;O&quot;, &amp;dict))\n        goto error;\n\n    // for k, v in d.items(): print(f&quot;({k}, {v})&quot;)\n    while (PyDict_Next(dict, &amp;pos, &amp;key, &amp;val)) {\n        o = PyUnicode_FromFormat(&quot;(%S, %S)&quot;, key, val);\n        if (!o) continue;\n        PY_PRINTF(o);\n        Py_XDECREF(o);\n    }\n\n    Py_INCREF(Py_None);\n    result = Py_None;\nerror:\n    return result;\n}\n\nstatic PyMethodDef methods[] = {\n    {&quot;iter_dict&quot;, (PyCFunction)iter_dict, METH_VARARGS, NULL},\n    {NULL, NULL, 0, NULL}\n};\n\nstatic struct PyModuleDef module = {\n    PyModuleDef_HEAD_INIT, &quot;foo&quot;, NULL, -1, methods\n};\n\nPyMODINIT_FUNC PyInit_foo(void)\n{\n    return PyModule_Create(&amp;module);\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python setup.py -q build\n$ python setup.py -q <span class=\"token function\">install</span>\n$ python -c <span class=\"token string\">\"import foo; foo.iter_dict({'k': 'v'})\"</span>\n<span class=\"token string\">'(k, v)'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Simple Class</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;Python.h&gt;\n\ntypedef struct {\n    PyObject_HEAD\n} FooObject;\n\n/* calss Foo(object): pass */\n\nstatic PyTypeObject FooType = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    .tp_name = &quot;foo.Foo&quot;,\n    .tp_doc = &quot;Foo objects&quot;,\n    .tp_basicsize = sizeof(FooObject),\n    .tp_itemsize = 0,\n    .tp_flags = Py_TPFLAGS_DEFAULT,\n    .tp_new = PyType_GenericNew\n};\n\nstatic PyModuleDef module = {\n    PyModuleDef_HEAD_INIT,\n    .m_name = &quot;foo&quot;,\n    .m_doc = &quot;module foo&quot;,\n    .m_size = -1\n};\n\nPyMODINIT_FUNC\nPyInit_foo(void)\n{\n    PyObject *m = NULL;\n    if (PyType_Ready(&amp;FooType) &lt; 0)\n        return NULL;\n    if ((m = PyModule_Create(&amp;module)) == NULL)\n        return NULL;\n    Py_XINCREF(&amp;FooType);\n    PyModule_AddObject(m, &quot;Foo&quot;, (PyObject *) &amp;FooType);\n    return m;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python setup.py -q build\n$ python setup.py -q <span class=\"token function\">install</span>\n$ python -q\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token function\">import</span> foo\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> print<span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">(</span>foo.Foo<span class=\"token punctuation\">))</span>\n<span class=\"token operator\">&lt;</span>class <span class=\"token string\">'type'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> o <span class=\"token operator\">=</span> foo.Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> print<span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">))</span>\n<span class=\"token operator\">&lt;</span>class <span class=\"token string\">'foo.Foo'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> class Foo<span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span>: <span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span>.\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> print<span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">(</span>Foo<span class=\"token punctuation\">))</span>\n<span class=\"token operator\">&lt;</span>class <span class=\"token string\">'type'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> o <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> print<span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">))</span>\n<span class=\"token operator\">&lt;</span>class <span class=\"token string\">'__main__.Foo'</span><span class=\"token operator\">></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Simple Class with Members and Methods</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;Python.h&gt;\n#include &lt;structmember.h&gt;\n\n/*\n * class Foo:\n *     def __new__(cls, *a, **kw):\n *         foo_obj = object.__new__(cls)\n *         foo_obj.foo = &quot;&quot;\n *         foo_obj.bar = &quot;&quot;\n *         return foo_obj\n *\n *     def __init__(self, foo, bar):\n *         self.foo = foo\n *         self.bar = bar\n *\n *     def fib(self, n):\n *         if n &lt; 2:\n *             return n\n *         return self.fib(n - 1) + self.fib(n - 2)\n */\n\ntypedef struct {\n    PyObject_HEAD\n    PyObject *foo;\n    PyObject *bar;\n} FooObject;\n\nstatic void\nFoo_dealloc(FooObject *self)\n{\n    Py_XDECREF(self-&gt;foo);\n    Py_XDECREF(self-&gt;bar);\n    Py_TYPE(self)-&gt;tp_free((PyObject *) self);\n}\n\nstatic PyObject *\nFoo_new(PyTypeObject *type, PyObject *args, PyObject *kw)\n{\n    int rc = -1;\n    FooObject *self = NULL;\n    self = (FooObject *) type-&gt;tp_alloc(type, 0);\n\n    if (!self) goto error;\n\n    /* allocate attributes */\n    self-&gt;foo = PyUnicode_FromString(&quot;&quot;);\n    if (self-&gt;foo == NULL) goto error;\n\n    self-&gt;bar = PyUnicode_FromString(&quot;&quot;);\n    if (self-&gt;bar == NULL) goto error;\n\n    rc = 0;\nerror:\n    if (rc &lt; 0) {\n        Py_XDECREF(self-&gt;foo);\n        Py_XINCREF(self-&gt;bar);\n        Py_XDECREF(self);\n    }\n    return (PyObject *) self;\n}\n\nstatic int\nFoo_init(FooObject *self, PyObject *args, PyObject *kw)\n{\n    int rc = -1;\n    static char *keywords[] = {&quot;foo&quot;, &quot;bar&quot;, NULL};\n    PyObject *foo = NULL, *bar = NULL, *ptr = NULL;\n\n    if (!PyArg_ParseTupleAndKeywords(args, kw,\n                                    &quot;|OO&quot;, keywords,\n                                    &amp;foo, &amp;bar))\n    {\n        goto error;\n    }\n\n    if (foo) {\n        ptr = self-&gt;foo;\n        Py_INCREF(foo);\n        self-&gt;foo = foo;\n        Py_XDECREF(ptr);\n    }\n\n    if (bar) {\n        ptr = self-&gt;bar;\n        Py_INCREF(bar);\n        self-&gt;bar = bar;\n        Py_XDECREF(ptr);\n    }\n    rc = 0;\nerror:\n    return rc;\n}\n\nstatic unsigned long\nfib(unsigned long n)\n{\n    if (n &lt; 2) return n;\n    return fib(n - 1) + fib(n - 2);\n}\n\nstatic PyObject *\nFoo_fib(FooObject *self, PyObject *args)\n{\n    unsigned long n = 0;\n    if (!PyArg_ParseTuple(args, &quot;k&quot;, &amp;n)) return NULL;\n    return PyLong_FromUnsignedLong(fib(n));\n}\n\nstatic PyMemberDef Foo_members[] = {\n    {&quot;foo&quot;, T_OBJECT_EX, offsetof(FooObject, foo), 0, NULL},\n    {&quot;bar&quot;, T_OBJECT_EX, offsetof(FooObject, bar), 0, NULL}\n};\n\nstatic PyMethodDef Foo_methods[] = {\n    {&quot;fib&quot;, (PyCFunction)Foo_fib, METH_VARARGS | METH_KEYWORDS, NULL},\n    {NULL, NULL, 0, NULL}\n};\n\nstatic PyTypeObject FooType = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    .tp_name = &quot;foo.Foo&quot;,\n    .tp_doc = &quot;Foo objects&quot;,\n    .tp_basicsize = sizeof(FooObject),\n    .tp_itemsize = 0,\n    .tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,\n    .tp_new = Foo_new,\n    .tp_init = (initproc) Foo_init,\n    .tp_dealloc = (destructor) Foo_dealloc,\n    .tp_members = Foo_members,\n    .tp_methods = Foo_methods\n};\n\nstatic PyModuleDef module = {\n    PyModuleDef_HEAD_INIT, &quot;foo&quot;, NULL, -1, NULL\n};\n\nPyMODINIT_FUNC\nPyInit_foo(void)\n{\n    PyObject *m = NULL;\n    if (PyType_Ready(&amp;FooType) &lt; 0)\n        return NULL;\n    if ((m = PyModule_Create(&amp;module)) == NULL)\n        return NULL;\n    Py_XINCREF(&amp;FooType);\n    PyModule_AddObject(m, &quot;Foo&quot;, (PyObject *) &amp;FooType);\n    return m;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python setup.py -q build\n$ python setup.py -q <span class=\"token function\">install</span>\n$ python -q\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token function\">import</span> foo\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> o <span class=\"token operator\">=</span> foo.Foo<span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span>, <span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> o.foo\n<span class=\"token string\">'foo'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> o.bar\n<span class=\"token string\">'bar'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> o.fib<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">55</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Simplie Class with Getter and Setter</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;Python.h&gt;\n\n/*\n * class Foo:\n *     def __new__(cls, *a, **kw):\n *         foo_obj = object.__new__(cls)\n *         foo_obj._foo = &quot;&quot;\n *         return foo_obj\n *\n *     def __init__(self, foo=None):\n *         if foo and isinstance(foo, &#39;str&#39;):\n *             self._foo = foo\n *\n *     @property\n *     def foo(self):\n *         return self._foo\n *\n *     @foo.setter\n *     def foo(self, value):\n *         if not value or not isinstance(value, str):\n *             raise TypeError(&quot;value should be unicode&quot;)\n *         self._foo = value\n */\n\ntypedef struct {\n    PyObject_HEAD\n    PyObject *foo;\n} FooObject;\n\nstatic void\nFoo_dealloc(FooObject *self)\n{\n    Py_XDECREF(self-&gt;foo);\n    Py_TYPE(self)-&gt;tp_free((PyObject *) self);\n}\n\nstatic PyObject *\nFoo_new(PyTypeObject *type, PyObject *args, PyObject *kw)\n{\n    int rc = -1;\n    FooObject *self = NULL;\n    self = (FooObject *) type-&gt;tp_alloc(type, 0);\n\n    if (!self) goto error;\n\n    /* allocate attributes */\n    self-&gt;foo = PyUnicode_FromString(&quot;&quot;);\n    if (self-&gt;foo == NULL) goto error;\n\n    rc = 0;\nerror:\n    if (rc &lt; 0) {\n        Py_XDECREF(self-&gt;foo);\n        Py_XDECREF(self);\n    }\n    return (PyObject *) self;\n}\n\nstatic int\nFoo_init(FooObject *self, PyObject *args, PyObject *kw)\n{\n    int rc = -1;\n    static char *keywords[] = {&quot;foo&quot;, NULL};\n    PyObject *foo = NULL, *ptr = NULL;\n\n    if (!PyArg_ParseTupleAndKeywords(args, kw,\n                                    &quot;|O&quot;, keywords,\n                                    &amp;foo))\n    {\n        goto error;\n    }\n\n    if (foo &amp;&amp; PyUnicode_Check(foo)) {\n        ptr = self-&gt;foo;\n        Py_INCREF(foo);\n        self-&gt;foo = foo;\n        Py_XDECREF(ptr);\n    }\n\n    rc = 0;\nerror:\n    return rc;\n}\n\nstatic PyObject *\nFoo_getfoo(FooObject *self, void *closure)\n{\n    Py_INCREF(self-&gt;foo);\n    return self-&gt;foo;\n}\n\nstatic int\nFoo_setfoo(FooObject *self, PyObject *value, void *closure)\n{\n    int rc = -1;\n\n    if (!value || !PyUnicode_Check(value)) {\n        PyErr_SetString(PyExc_TypeError, &quot;value should be unicode&quot;);\n        goto error;\n    }\n    Py_INCREF(value);\n    Py_XDECREF(self-&gt;foo);\n    self-&gt;foo = value;\n    rc = 0;\nerror:\n    return rc;\n}\n\nstatic PyGetSetDef Foo_getsetters[] = {\n    {&quot;foo&quot;, (getter)Foo_getfoo, (setter)Foo_setfoo}\n};\n\nstatic PyTypeObject FooType = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    .tp_name = &quot;foo.Foo&quot;,\n    .tp_doc = &quot;Foo objects&quot;,\n    .tp_basicsize = sizeof(FooObject),\n    .tp_itemsize = 0,\n    .tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,\n    .tp_new = Foo_new,\n    .tp_init = (initproc) Foo_init,\n    .tp_dealloc = (destructor) Foo_dealloc,\n    .tp_getset = Foo_getsetters,\n};\n\nstatic PyModuleDef module = {\n    PyModuleDef_HEAD_INIT, &quot;foo&quot;, NULL, -1, NULL\n};\n\nPyMODINIT_FUNC\nPyInit_foo(void)\n{\n    PyObject *m = NULL;\n    if (PyType_Ready(&amp;FooType) &lt; 0)\n        return NULL;\n    if ((m = PyModule_Create(&amp;module)) == NULL)\n        return NULL;\n    Py_XINCREF(&amp;FooType);\n    PyModule_AddObject(m, &quot;Foo&quot;, (PyObject *) &amp;FooType);\n    return m;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python setup.py -q build\n$ python setup.py -q <span class=\"token function\">install</span>\n$ python -q\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token function\">import</span> foo\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> o <span class=\"token operator\">=</span> foo.Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> o.foo\n<span class=\"token string\">''</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> o.foo <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> o.foo\n<span class=\"token string\">'foo'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> o.foo <span class=\"token operator\">=</span> None\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"&lt;stdin>\"</span>, line <span class=\"token number\">1</span>, <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\nTypeError: value should be unicode</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Inherit from Other Class</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;Python.h&gt;\n#include &lt;structmember.h&gt;\n\n/*\n * class Foo:\n *     def __new__(cls, *a, **kw):\n *         foo_obj = object.__new__(cls)\n *         foo_obj.foo = &quot;&quot;\n *         return foo_obj\n *\n *     def __init__(self, foo):\n *         self.foo = foo\n *\n *     def fib(self, n):\n *         if n &lt; 2:\n *             return n\n *         return self.fib(n - 1) + self.fib(n - 2)\n */\n\n/* FooObject */\n\ntypedef struct {\n    PyObject_HEAD\n    PyObject *foo;\n} FooObject;\n\nstatic void\nFoo_dealloc(FooObject *self)\n{\n    Py_XDECREF(self-&gt;foo);\n    Py_TYPE(self)-&gt;tp_free((PyObject *) self);\n}\n\nstatic PyObject *\nFoo_new(PyTypeObject *type, PyObject *args, PyObject *kw)\n{\n    int rc = -1;\n    FooObject *self = NULL;\n    self = (FooObject *) type-&gt;tp_alloc(type, 0);\n\n    if (!self) goto error;\n\n    /* allocate attributes */\n    self-&gt;foo = PyUnicode_FromString(&quot;&quot;);\n    if (self-&gt;foo == NULL) goto error;\n\n    rc = 0;\nerror:\n    if (rc &lt; 0) {\n        Py_XDECREF(self-&gt;foo);\n        Py_XDECREF(self);\n    }\n    return (PyObject *) self;\n}\n\nstatic int\nFoo_init(FooObject *self, PyObject *args, PyObject *kw)\n{\n    int rc = -1;\n    static char *keywords[] = {&quot;foo&quot;, NULL};\n    PyObject *foo = NULL, *ptr = NULL;\n\n    if (!PyArg_ParseTupleAndKeywords(args, kw, &quot;|O&quot;, keywords, &amp;foo)) {\n        goto error;\n    }\n\n    if (foo) {\n        ptr = self-&gt;foo;\n        Py_INCREF(foo);\n        self-&gt;foo = foo;\n        Py_XDECREF(ptr);\n    }\n    rc = 0;\nerror:\n    return rc;\n}\n\nstatic unsigned long\nfib(unsigned long n)\n{\n    if (n &lt; 2) return n;\n    return fib(n - 1) + fib(n - 2);\n}\n\nstatic PyObject *\nFoo_fib(FooObject *self, PyObject *args)\n{\n    unsigned long n = 0;\n    if (!PyArg_ParseTuple(args, &quot;k&quot;, &amp;n)) return NULL;\n    return PyLong_FromUnsignedLong(fib(n));\n}\n\nstatic PyMemberDef Foo_members[] = {\n    {&quot;foo&quot;, T_OBJECT_EX, offsetof(FooObject, foo), 0, NULL}\n};\n\nstatic PyMethodDef Foo_methods[] = {\n    {&quot;fib&quot;, (PyCFunction)Foo_fib, METH_VARARGS | METH_KEYWORDS, NULL},\n    {NULL, NULL, 0, NULL}\n};\n\nstatic PyTypeObject FooType = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    .tp_name = &quot;foo.Foo&quot;,\n    .tp_doc = &quot;Foo objects&quot;,\n    .tp_basicsize = sizeof(FooObject),\n    .tp_itemsize = 0,\n    .tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,\n    .tp_new = Foo_new,\n    .tp_init = (initproc) Foo_init,\n    .tp_dealloc = (destructor) Foo_dealloc,\n    .tp_members = Foo_members,\n    .tp_methods = Foo_methods\n};\n\n/*\n * class Bar(Foo):\n *     def __init__(self, bar):\n *         super().__init__(bar)\n *\n *     def gcd(self, a, b):\n *         while b:\n *             a, b = b, a % b\n *         return a\n */\n\n/* BarObject */\n\ntypedef struct {\n    FooObject super;\n} BarObject;\n\nstatic unsigned long\ngcd(unsigned long a, unsigned long b)\n{\n    unsigned long t = 0;\n    while (b) {\n        t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n\nstatic int\nBar_init(FooObject *self, PyObject *args, PyObject *kw)\n{\n    return FooType.tp_init((PyObject *) self, args, kw);\n}\n\nstatic PyObject *\nBar_gcd(BarObject *self, PyObject *args)\n{\n    unsigned long a = 0, b = 0;\n    if (!PyArg_ParseTuple(args, &quot;kk&quot;, &amp;a, &amp;b)) return NULL;\n    return PyLong_FromUnsignedLong(gcd(a, b));\n}\n\nstatic PyMethodDef Bar_methods[] = {\n    {&quot;gcd&quot;, (PyCFunction)Bar_gcd, METH_VARARGS, NULL},\n    {NULL, NULL, 0, NULL}\n};\n\nstatic PyTypeObject BarType = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    .tp_name = &quot;foo.Bar&quot;,\n    .tp_doc = &quot;Bar objects&quot;,\n    .tp_basicsize = sizeof(BarObject),\n    .tp_itemsize = 0,\n    .tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,\n    .tp_base = &amp;FooType,\n    .tp_init = (initproc) Bar_init,\n    .tp_methods = Bar_methods\n};\n\n/* Module */\n\nstatic PyModuleDef module = {\n    PyModuleDef_HEAD_INIT, &quot;foo&quot;, NULL, -1, NULL\n};\n\nPyMODINIT_FUNC\nPyInit_foo(void)\n{\n    PyObject *m = NULL;\n    if (PyType_Ready(&amp;FooType) &lt; 0)\n        return NULL;\n    if (PyType_Ready(&amp;BarType) &lt; 0)\n        return NULL;\n    if ((m = PyModule_Create(&amp;module)) == NULL)\n        return NULL;\n\n    Py_XINCREF(&amp;FooType);\n    Py_XINCREF(&amp;BarType);\n    PyModule_AddObject(m, &quot;Foo&quot;, (PyObject *) &amp;FooType);\n    PyModule_AddObject(m, &quot;Bar&quot;, (PyObject *) &amp;BarType);\n    return m;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python setup.py -q build\n$ python setup.py -q <span class=\"token function\">install</span>\n$ python -q\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token function\">import</span> foo\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> bar <span class=\"token operator\">=</span> foo.Bar<span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> bar.foo\n<span class=\"token string\">'bar'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> bar.fib<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">55</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> bar.gcd<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Run a Python Command</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;stdio.h&gt;\n#include &lt;Python.h&gt;\n\nint\nmain(int argc, char *argv[])\n{\n    int rc = -1;\n    Py_Initialize();\n    rc = PyRun_SimpleString(argv[1]);\n    Py_Finalize();\n    return rc;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ clang <span class=\"token variable\"><span class=\"token variable\">`</span>python3-config --cflags<span class=\"token variable\">`</span></span> -c foo.c -o foo.o\n$ clang <span class=\"token variable\"><span class=\"token variable\">`</span>python3-config --ldflags<span class=\"token variable\">`</span></span> foo.o -o foo\n$ ./foo <span class=\"token string\">\"print('Hello Python')\"</span>\nHello Python</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Run a Python File</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;stdio.h&gt;\n#include &lt;Python.h&gt;\n\nint\nmain(int argc, char *argv[])\n{\n    int rc = -1, i = 0;\n    wchar_t **argv_copy = NULL;\n    const char *filename = NULL;\n    FILE *fp = NULL;\n    PyCompilerFlags cf = {.cf_flags = 0};\n\n    filename = argv[1];\n    fp = fopen(filename, &quot;r&quot;);\n    if (!fp)\n        goto error;\n\n    // copy argv\n    argv_copy = PyMem_RawMalloc(sizeof(wchar_t*) * argc);\n    if (!argv_copy)\n        goto error;\n\n    for (i = 0; i &lt; argc; i++) {\n        argv_copy[i] = Py_DecodeLocale(argv[i], NULL);\n        if (argv_copy[i]) continue;\n        fprintf(stderr, &quot;Unable to decode the argument&quot;);\n        goto error;\n    }\n\n    Py_Initialize();\n    Py_SetProgramName(argv_copy[0]);\n    PySys_SetArgv(argc, argv_copy);\n    rc = PyRun_AnyFileExFlags(fp, filename, 0, &amp;cf);\n\nerror:\n    if (argv_copy) {\n        for (i = 0; i &lt; argc; i++)\n            PyMem_RawFree(argv_copy[i]);\n        PyMem_RawFree(argv_copy);\n    }\n    if (fp) fclose(fp);\n    Py_Finalize();\n    return rc;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ clang <span class=\"token variable\"><span class=\"token variable\">`</span>python3-config --cflags<span class=\"token variable\">`</span></span> -c foo.c -o foo.o\n$ clang <span class=\"token variable\"><span class=\"token variable\">`</span>python3-config --ldflags<span class=\"token variable\">`</span></span> foo.o -o foo\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"import sys; print(sys.argv)\"</span> <span class=\"token operator\">></span> foo.py\n$ ./foo foo.py arg1 arg2 arg3\n<span class=\"token punctuation\">[</span><span class=\"token string\">'./foo'</span>, <span class=\"token string\">'foo.py'</span>, <span class=\"token string\">'arg1'</span>, <span class=\"token string\">'arg2'</span>, <span class=\"token string\">'arg3'</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Import a Python Module</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;stdio.h&gt;\n#include &lt;Python.h&gt;\n\n#define PYOBJECT_CHECK(obj, label) \\\n    if (!obj) { \\\n        PyErr_Print(); \\\n        goto label; \\\n    }\n\nint\nmain(int argc, char *argv[])\n{\n    int rc = -1;\n    wchar_t *program = NULL;\n    PyObject *json_module = NULL, *json_dict = NULL;\n    PyObject *json_dumps = NULL;\n    PyObject *dict = NULL;\n    PyObject *result = NULL;\n\n    program = Py_DecodeLocale(argv[0], NULL);\n    if (!program) {\n        fprintf(stderr, &quot;unable to decode the program name&quot;);\n        goto error;\n    }\n\n    Py_SetProgramName(program);\n    Py_Initialize();\n\n    // import json\n    json_module = PyImport_ImportModule(&quot;json&quot;);\n    PYOBJECT_CHECK(json_module, error);\n\n    // json_dict = json.__dict__\n    json_dict = PyModule_GetDict(json_module);\n    PYOBJECT_CHECK(json_dict, error);\n\n    // json_dumps = json.__dict__[&#39;dumps&#39;]\n    json_dumps = PyDict_GetItemString(json_dict, &quot;dumps&quot;);\n    PYOBJECT_CHECK(json_dumps, error);\n\n    // dict = {&#39;foo&#39;: &#39;Foo&#39;, &#39;bar&#39;: 123}\n    dict = Py_BuildValue(&quot;({sssi})&quot;, &quot;foo&quot;, &quot;Foo&quot;, &quot;bar&quot;, 123);\n    PYOBJECT_CHECK(dict, error);\n\n    // result = json.dumps(dict)\n    result = PyObject_CallObject(json_dumps, dict);\n    PYOBJECT_CHECK(result, error);\n    PyObject_Print(result, stdout, 0);\n    printf(&quot;\\n&quot;);\n    rc = 0;\n\nerror:\n    Py_XDECREF(result);\n    Py_XDECREF(dict);\n    Py_XDECREF(json_dumps);\n    Py_XDECREF(json_dict);\n    Py_XDECREF(json_module);\n\n    PyMem_RawFree(program);\n    Py_Finalize();\n    return rc;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ clang <span class=\"token variable\"><span class=\"token variable\">`</span>python3-config --cflags<span class=\"token variable\">`</span></span> -c foo.c -o foo.o\n$ clang <span class=\"token variable\"><span class=\"token variable\">`</span>python3-config --ldflags<span class=\"token variable\">`</span></span> foo.o -o foo\n$ ./foo\n<span class=\"token string\">'{\"foo\": \"Foo\", \"bar\": 123}'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Import everything of a Module</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;stdio.h&gt;\n#include &lt;Python.h&gt;\n\n#define PYOBJECT_CHECK(obj, label) \\\n    if (!obj) { \\\n        PyErr_Print(); \\\n        goto label; \\\n    }\n\n\nint\nmain(int argc, char *argv[])\n{\n    int rc = -1;\n    wchar_t *program = NULL;\n    PyObject *main_module = NULL, *main_dict = NULL;\n    PyObject *uname = NULL;\n    PyObject *sysname = NULL;\n    PyObject *result = NULL;\n\n    program = Py_DecodeLocale(argv[0], NULL);\n    if (!program) {\n        fprintf(stderr, &quot;unable to decode the program name&quot;);\n        goto error;\n    }\n\n    Py_SetProgramName(program);\n    Py_Initialize();\n\n    // import __main__\n    main_module = PyImport_ImportModule(&quot;__main__&quot;);\n    PYOBJECT_CHECK(main_module, error);\n\n    // main_dict = __main__.__dict__\n    main_dict = PyModule_GetDict(main_module);\n    PYOBJECT_CHECK(main_dict, error);\n\n    // from os import *\n    result = PyRun_String(&quot;from os import *&quot;,\n                          Py_file_input,\n                          main_dict,\n                          main_dict);\n    PYOBJECT_CHECK(result, error);\n    Py_XDECREF(result);\n    Py_XDECREF(main_dict);\n\n    // uname = __main__.__dict__[&#39;uname&#39;]\n    main_dict = PyModule_GetDict(main_module);\n    PYOBJECT_CHECK(main_dict, error);\n\n    // result = uname()\n    uname = PyDict_GetItemString(main_dict, &quot;uname&quot;);\n    PYOBJECT_CHECK(uname, error);\n    result = PyObject_CallObject(uname, NULL);\n    PYOBJECT_CHECK(result, error);\n\n    // sysname = result.sysname\n    sysname = PyObject_GetAttrString(result, &quot;sysname&quot;);\n    PYOBJECT_CHECK(sysname, error);\n    PyObject_Print(sysname, stdout, 0);\n    printf(&quot;\\n&quot;);\n\n    rc = 0;\nerror:\n    Py_XDECREF(sysname);\n    Py_XDECREF(result);\n    Py_XDECREF(uname);\n    Py_XDECREF(main_dict);\n    Py_XDECREF(main_module);\n\n    PyMem_RawFree(program);\n    Py_Finalize();\n    return rc;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ clang <span class=\"token variable\"><span class=\"token variable\">`</span>python3-config --cflags<span class=\"token variable\">`</span></span> -c foo.c -o foo.o\n$ clang <span class=\"token variable\"><span class=\"token variable\">`</span>python3-config --ldflags<span class=\"token variable\">`</span></span> foo.o -o foo\n$ ./foo\n<span class=\"token string\">'Darwin'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Access Attributes</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;stdio.h&gt;\n#include &lt;Python.h&gt;\n\n#define PYOBJECT_CHECK(obj, label) \\\n    if (!obj) { \\\n        PyErr_Print(); \\\n        goto label; \\\n    }\n\nint\nmain(int argc, char *argv[])\n{\n    int rc = -1;\n    wchar_t *program = NULL;\n    PyObject *json_module = NULL;\n    PyObject *json_dumps = NULL;\n    PyObject *dict = NULL;\n    PyObject *result = NULL;\n\n    program = Py_DecodeLocale(argv[0], NULL);\n    if (!program) {\n        fprintf(stderr, &quot;unable to decode the program name&quot;);\n        goto error;\n    }\n\n    Py_SetProgramName(program);\n    Py_Initialize();\n\n    // import json\n    json_module = PyImport_ImportModule(&quot;json&quot;);\n    PYOBJECT_CHECK(json_module, error);\n\n    // json_dumps = json.dumps\n    json_dumps = PyObject_GetAttrString(json_module, &quot;dumps&quot;);\n    PYOBJECT_CHECK(json_dumps, error);\n\n    // dict = {&#39;foo&#39;: &#39;Foo&#39;, &#39;bar&#39;: 123}\n    dict = Py_BuildValue(&quot;({sssi})&quot;, &quot;foo&quot;, &quot;Foo&quot;, &quot;bar&quot;, 123);\n    PYOBJECT_CHECK(dict, error);\n\n    // result = json.dumps(dict)\n    result = PyObject_CallObject(json_dumps, dict);\n    PYOBJECT_CHECK(result, error);\n    PyObject_Print(result, stdout, 0);\n    printf(&quot;\\n&quot;);\n    rc = 0;\nerror:\n    Py_XDECREF(result);\n    Py_XDECREF(dict);\n    Py_XDECREF(json_dumps);\n    Py_XDECREF(json_module);\n\n    PyMem_RawFree(program);\n    Py_Finalize();\n    return rc;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ clang <span class=\"token variable\"><span class=\"token variable\">`</span>python3-config --cflags<span class=\"token variable\">`</span></span> -c foo.c -o foo.o\n$ clang <span class=\"token variable\"><span class=\"token variable\">`</span>python3-config --ldflags<span class=\"token variable\">`</span></span> foo.o -o foo\n$ ./foo\n<span class=\"token string\">'{\"foo\": \"Foo\", \"bar\": 123}'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Performance of C Extension</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &lt;Python.h&gt;\n\nstatic unsigned long\nfib(unsigned long n)\n{\n    if (n &lt; 2) return n;\n    return fib(n - 1) + fib(n - 2);\n}\n\nstatic PyObject *\nfibonacci(PyObject *self, PyObject *args)\n{\n    unsigned long n = 0;\n    if (!PyArg_ParseTuple(args, &quot;k&quot;, &amp;n)) return NULL;\n    return PyLong_FromUnsignedLong(fib(n));\n}\n\nstatic PyMethodDef methods[] = {\n    {&quot;fib&quot;, (PyCFunction)fibonacci, METH_VARARGS, NULL},\n    {NULL, NULL, 0, NULL}\n};\n\nstatic struct PyModuleDef module = {\n    PyModuleDef_HEAD_INIT, &quot;foo&quot;, NULL, -1, methods\n};\n\nPyMODINIT_FUNC PyInit_foo(void)\n{\n    return PyModule_Create(&amp;module);\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Compare the performance with pure Python</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> time\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> foo\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> fib<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> _ <span class=\"token operator\">=</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">-</span> s\n<span class=\"token number\">4.953313112258911</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> _ <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">.</span>fib<span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">-</span> s\n<span class=\"token number\">0.04628586769104004</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Performance of ctypes</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">// Compile (Mac)\n// -------------\n//\n//   $ clang -Wall -Werror -shared -fPIC -o libfib.dylib fib.c\n//\nunsigned int fib(unsigned int n)\n{\n    if ( n &lt; 2) {\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Compare the performance with pure Python</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> time\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> ctypes <span class=\"token keyword\">import</span> CDLL\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> fib<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> cfib <span class=\"token operator\">=</span> CDLL<span class=\"token punctuation\">(</span><span class=\"token string\">\"./libfib.dylib\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fib\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> _ <span class=\"token operator\">=</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">-</span> s\n<span class=\"token number\">4.918856859207153</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> _ <span class=\"token operator\">=</span> cfib<span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">-</span> s\n<span class=\"token number\">0.07283687591552734</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>ctypes Error handling</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function\n\n<span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">from</span> ctypes <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> sys <span class=\"token keyword\">import</span> platform<span class=\"token punctuation\">,</span> maxsize\n\nis_64bits <span class=\"token operator\">=</span> maxsize <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">32</span>\n\n<span class=\"token keyword\">if</span> is_64bits <span class=\"token keyword\">and</span> platform <span class=\"token operator\">==</span> <span class=\"token string\">\"darwin\"</span><span class=\"token punctuation\">:</span>\n    libc <span class=\"token operator\">=</span> CDLL<span class=\"token punctuation\">(</span><span class=\"token string\">\"libc.dylib\"</span><span class=\"token punctuation\">,</span> use_errno<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">raise</span> RuntimeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Not support platform: {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>platform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nstat <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>stat\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Stat</span><span class=\"token punctuation\">(</span>Structure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    From /usr/include/sys/stat.h\n\n    struct stat {\n        dev_t         st_dev;\n        ino_t         st_ino;\n        mode_t        st_mode;\n        nlink_t       st_nlink;\n        uid_t         st_uid;\n        gid_t         st_gid;\n        dev_t         st_rdev;\n    #ifndef _POSIX_SOURCE\n        struct      timespec st_atimespec;\n        struct      timespec st_mtimespec;\n        struct      timespec st_ctimespec;\n    #else\n        time_t        st_atime;\n        long          st_atimensec;\n        time_t        st_mtime;\n        long          st_mtimensec;\n        time_t        st_ctime;\n        long          st_ctimensec;\n    #endif\n        off_t         st_size;\n        int64_t       st_blocks;\n        u_int32_t     st_blksize;\n        u_int32_t     st_flags;\n        u_int32_t     st_gen;\n        int32_t       st_lspare;\n        int64_t       st_qspare[2];\n    };\n    \"\"\"</span>\n    _fields_ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_dev\"</span><span class=\"token punctuation\">,</span> c_ulong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_ino\"</span><span class=\"token punctuation\">,</span> c_ulong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_mode\"</span><span class=\"token punctuation\">,</span> c_ushort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_nlink\"</span><span class=\"token punctuation\">,</span> c_uint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_uid\"</span><span class=\"token punctuation\">,</span> c_uint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_gid\"</span><span class=\"token punctuation\">,</span> c_uint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_rdev\"</span><span class=\"token punctuation\">,</span> c_ulong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_atime\"</span><span class=\"token punctuation\">,</span> c_longlong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_atimendesc\"</span><span class=\"token punctuation\">,</span> c_long<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_mtime\"</span><span class=\"token punctuation\">,</span> c_longlong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_mtimendesc\"</span><span class=\"token punctuation\">,</span> c_long<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_ctime\"</span><span class=\"token punctuation\">,</span> c_longlong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_ctimendesc\"</span><span class=\"token punctuation\">,</span> c_long<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_size\"</span><span class=\"token punctuation\">,</span> c_ulonglong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_blocks\"</span><span class=\"token punctuation\">,</span> c_int64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_blksize\"</span><span class=\"token punctuation\">,</span> c_uint32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_flags\"</span><span class=\"token punctuation\">,</span> c_uint32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_gen\"</span><span class=\"token punctuation\">,</span> c_uint32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_lspare\"</span><span class=\"token punctuation\">,</span> c_int32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"st_qspare\"</span><span class=\"token punctuation\">,</span> POINTER<span class=\"token punctuation\">(</span>c_int64<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># stat success</span>\npath <span class=\"token operator\">=</span> create_string_buffer<span class=\"token punctuation\">(</span><span class=\"token string\">b\"/etc/passwd\"</span><span class=\"token punctuation\">)</span>\nst <span class=\"token operator\">=</span> Stat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nret <span class=\"token operator\">=</span> stat<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> byref<span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> ret <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n\n<span class=\"token comment\"># if stat fail, check errno</span>\npath <span class=\"token operator\">=</span> create_string_buffer<span class=\"token punctuation\">(</span><span class=\"token string\">b\"&amp;%$#@!\"</span><span class=\"token punctuation\">)</span>\nst <span class=\"token operator\">=</span> Stat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nret <span class=\"token operator\">=</span> stat<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> byref<span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> ret <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    errno <span class=\"token operator\">=</span> get_errno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># get errno</span>\n    errmsg <span class=\"token operator\">=</span> <span class=\"token string\">\"stat({}) failed. {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>strerror<span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">raise</span> OSError<span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">,</span> errmsg<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ python err_handling.py   # python2\nTraceback (most recent call last):\n  File &quot;err_handling.py&quot;, line 85, in &lt;module&gt;\n    raise OSError(errno_, errmsg)\nOSError: [Errno 2] stat(&amp;%$#@!) failed. No such file or directory\n\n$ python3 err_handling.py  # python3\nTraceback (most recent call last):\n  File &quot;err_handling.py&quot;, line 85, in &lt;module&gt;\n    raise OSError(errno_, errmsg)\nFileNotFoundError: [Errno 2] stat(b&#39;&amp;%$#@!\\x00&#39;) failed. No such file or directory</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"https://www.pythonsheets.com/\">Acesse a ReferÃªncia original 1:</a>\n<a href=\"https://www.pythoncheatsheet.org/\">Acesse a ReferÃªncia original 2:</a></p>","frontmatter":{"title":"Python tudo sobre C Extensions","date":"January 05, 2020","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/python-c-extensions/","previous":{"fields":{"slug":"/python-code-style/"},"frontmatter":{"title":"Python tudo sobre Style"}},"next":{"fields":{"slug":"/python-future/"},"frontmatter":{"title":"Python tudo sobre Future"}}}}}