{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-future/","result":{"data":{"site":{"siteMetadata":{"title":"Python para impacientes"}},"markdownRemark":{"id":"63f6abdb-dc67-52d7-9010-9a9334b4bbd3","excerpt":"Future\nstatements\ntell the interpreter to compile some semantics as the semantics which\nwill be available in the future Python version. In other words, Python…","html":"<h1></h1>\n<p><a href=\"https://docs.python.org/3/reference/simple_stmts.html#future\">Future\nstatements</a>\ntell the interpreter to compile some semantics as the semantics which\nwill be available in the future Python version. In other words, Python\nuses <code class=\"language-text\">from __future__ import feature</code> to backport features from other\nhigher Python versions to the current interpreter. In Python 3, many\nfeatures such as <code class=\"language-text\">print_function</code> are already enabled, but we still\nleave these future statements for backward compatibility.</p>\n<p>Future statements are <strong>NOT</strong> import statements. Future statements\nchange how Python interprets the code. They <strong>MUST</strong> be at the top of\nthe file. Otherwise, Python interpreter will raise <code class=\"language-text\">SyntaxError</code>.</p>\n<p>If you’re interested in future statements and want to acquire more\nexplanation, further information can be found on <a href=\"https://www.python.org/dev/peps/pep-0236\">PEP 236 - Back to the\n__future__</a></p>\n<h2>List All New Features</h2>\n<p><a href=\"https://docs.python.org/3/library/__future__.html\">__future__</a> is a\nPython module. We can use it to check what kind of future features can\nimport to current Python interpreter. The fun is <code class=\"language-text\">import __future__</code> is\n<strong>NOT</strong> a future statement, it is a import statement.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pprint <span class=\"token keyword\">import</span> pprint\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> __future__\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pprint<span class=\"token punctuation\">(</span>__future__<span class=\"token punctuation\">.</span>all_feature_names<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'nested_scopes'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">'generators'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">'division'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">'absolute_import'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">'with_statement'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">'print_function'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">'unicode_literals'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">'barry_as_FLUFL'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">'generator_stop'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string\">'annotations'</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Future statements not only change the behavior of the Python interpreter\nbut also import <code class=\"language-text\">__future__._Feature</code> into the current program.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> print_function\n_Feature<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'alpha'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'alpha'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">65536</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>Print Function</h2>\n<p>Replacing <strong>print statement</strong> to <strong>print function</strong> is one of the most\nnotorious decision in Python history. However, this change brings some\nflexibilities to extend the ability of <code class=\"language-text\">print</code>. Further information can\nbe found on PEP <a href=\"https://www.python.org/dev/peps/pep-3105\">3105</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span> <span class=\"token string\">\"Hello World\"</span>  <span class=\"token comment\"># print is a statement</span>\nHello World\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span> <span class=\"token string\">\"Hello World\"</span>\n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">\"Hello World\"</span>\n                      <span class=\"token operator\">^</span>\nSyntaxError<span class=\"token punctuation\">:</span> invalid syntax\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># print become a function</span>\nHello World</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Unicode</h2>\n<p>As <strong>print function</strong>, making text become Unicode is another infamous\ndecision. Nevertheless, many modern programming languages’ text is\nUnicode. This change compels us to decode texts early in order to\nprevent runtime error after we run programs for a while. Further\ninformation can be found on PEP\n<a href=\"https://www.python.org/dev/peps/pep-3112\">3112</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Guido\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># string type is str in python2</span>\n<span class=\"token operator\">&lt;</span><span class=\"token builtin\">type</span> <span class=\"token string\">'str'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> unicode_literals\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Guido\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># string type become unicode</span>\n<span class=\"token operator\">&lt;</span><span class=\"token builtin\">type</span> <span class=\"token string\">'unicode'</span><span class=\"token operator\">></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Division</h2>\n<p>Sometimes, it is counterintuitive when the division result is int or\nlong. In this case, Python 3 enables the <strong>true division</strong> by default.\nHowever, in Python 2, we have to backport <code class=\"language-text\">division</code> to the current\ninterpreter. Further information can be found on PEP\n<a href=\"https://www.python.org/dev/peps/pep-0238\">238</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n<span class=\"token number\">0</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> division\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span>   <span class=\"token comment\"># return a float (classic division)</span>\n<span class=\"token number\">0.5</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>  <span class=\"token comment\"># return a int (floor division)</span>\n<span class=\"token number\">0</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Annotations</h2>\n<p>Before Python 3.7, we cannot assign annotations in a class or a function\nif it is not available in the current scope. A common situation is the\ndefinition of a container class.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Tree</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">:</span> Tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Example</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python3 foo.py\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"foo.py\"</span>, line <span class=\"token number\">1</span>, <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    class Tree<span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"foo.py\"</span>, line <span class=\"token number\">3</span>, <span class=\"token keyword\">in</span> Tree\n    def insert<span class=\"token punctuation\">(</span>self, tree: Tree<span class=\"token punctuation\">)</span>: <span class=\"token punctuation\">..</span>.\nNameError: name <span class=\"token string\">'Tree'</span> is not defined</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this case, the definition of the class is not available yet. Python\ninterpreter cannot parse the annotation during their definition time. To\nsolve this issue, Python uses string literals to replace the class.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Tree</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">:</span> <span class=\"token string\">'Tree'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>After version 3.7, Python introduces the future statement,\n<code class=\"language-text\">annotations</code>, to perform postponed evaluation. It will become the\ndefault feature in Python 4. For further information please refer to PEP\n<a href=\"https://www.python.org/dev/peps/pep-0563\">563</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> annotations\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Tree</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">:</span> Tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>BDFL Retirement</h2>\n<p><strong>New in Python 3.1</strong></p>\n<p>PEP <a href=\"https://www.python.org/dev/peps/pep-0401/\">401</a> is just an Easter\negg. This feature brings the current interpreter back to the past. It\nenables the diamond operator <code class=\"language-text\">&lt;&gt;</code> in Python 3.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span>\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> barry_as_FLUFL\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span>\n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span>\n    <span class=\"token number\">1</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span>\n       <span class=\"token operator\">^</span>\nSyntaxError<span class=\"token punctuation\">:</span> <span class=\"token keyword\">with</span> Barry <span class=\"token keyword\">as</span> BDFL<span class=\"token punctuation\">,</span> use <span class=\"token string\">'&lt;>'</span> instead of <span class=\"token string\">'!='</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;></span> <span class=\"token number\">2</span>\n<span class=\"token boolean\">True</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Braces</h2>\n<p><code class=\"language-text\">braces</code> is an Easter egg. The source code can be found on\n<a href=\"https://github.com/python/cpython/blob/master/Python/future.c\">future.c</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> braces\n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span>\nSyntaxError<span class=\"token punctuation\">:</span> <span class=\"token keyword\">not</span> a chance</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"https://www.pythonsheets.com/\">Acesse a Referência original 1:</a>\n<a href=\"https://www.pythoncheatsheet.org/\">Acesse a Referência original 2:</a></p>","frontmatter":{"title":"Python tudo sobre Future","date":"January 05, 2020","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/python-future/","previous":{"fields":{"slug":"/python-c-extensions/"},"frontmatter":{"title":"Python tudo sobre C Extensions"}},"next":{"fields":{"slug":"/python-io/"},"frontmatter":{"title":"Python tudo sobre Arquivos e I/O"}}}}}