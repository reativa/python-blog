{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-unicode/","result":{"data":{"site":{"siteMetadata":{"title":"Python para impacientes"}},"markdownRemark":{"id":"3b2c0b96-a2c8-53c8-95e5-c34073a90e3b","excerpt":"The main goal of this cheat sheet is to collect some common snippets\nwhich are related to Unicode. In Python 3, strings are represented by\nUnicode instead of…","html":"<h1></h1>\n<p>The main goal of this cheat sheet is to collect some common snippets\nwhich are related to Unicode. In Python 3, strings are represented by\nUnicode instead of bytes. Further information can be found on PEP\n<a href=\"https://www.python.org/dev/peps/pep-3100\">3100</a></p>\n<p><strong>ASCII</strong> code is the most well-known standard which defines numeric\ncodes for characters. The numeric values only define 128 characters\noriginally, so ASCII only contains control codes, digits, lowercase\nletters, uppercase letters, etc. However, it is not enough for us to\nrepresent characters such as accented characters, Chinese characters, or\nemoji existed around the world. Therefore, <strong>Unicode</strong> was developed to\nsolve this issue. It defines the <em>code point</em> to represent various\ncharacters like ASCII but the number of characters is up to 1,111,998.</p>\n<h2>String</h2>\n<p>In Python 2, strings are represented in <em>bytes</em>, not <em>Unicode</em>. Python\nprovides different types of string such as Unicode string, raw string,\nand so on. In this case, if we want to declare a Unicode string, we add\n<code class=\"language-text\">u</code> prefix for string literals.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token string\">'Café'</span>  <span class=\"token comment\"># byte string</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s\n<span class=\"token string\">'Caf\\xc3\\xa9'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token builtin\">type</span> <span class=\"token string\">'str'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> u <span class=\"token operator\">=</span> <span class=\"token string\">u'Café'</span> <span class=\"token comment\"># unicode string</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> u\n<span class=\"token string\">u'Caf\\xe9'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token builtin\">type</span> <span class=\"token string\">'unicode'</span><span class=\"token operator\">></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In Python 3, strings are represented in <em>Unicode</em>. If we want to\nrepresent a byte string, we add the <code class=\"language-text\">b</code> prefix for string literals. Note\nthat the early Python versions (3.0-3.2) do not support the <code class=\"language-text\">u</code> prefix.\nIn order to ease the pain to migrate Unicode aware applications from\nPython 2, Python 3.3 once again supports the <code class=\"language-text\">u</code> prefix for string\nliterals. Further information can be found on PEP\n<a href=\"https://www.python.org/dev/peps/pep-0414\">414</a></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token string\">'Café'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'str'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s\n<span class=\"token string\">'Café'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">b'Caf\\xc3\\xa9'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Café'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Characters</h2>\n<p>Python 2 takes all string characters as bytes. In this case, the length\nof strings may be not equivalent to the number of characters. For\nexample, the length of <code class=\"language-text\">Café</code> is 5, not 4 because <code class=\"language-text\">é</code> is encoded as a 2\nbytes character.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token operator\">=</span> <span class=\"token string\">'Café'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>_c <span class=\"token keyword\">for</span> _c <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\xc3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\xa9'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token number\">5</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token string\">u'Café'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>_c <span class=\"token keyword\">for</span> _c <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">u'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">u'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">u'f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">u'\\xe9'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token number\">4</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Python 3 takes all string characters as Unicode code point. The lenght\nof a string is always equivalent to the number of characters.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token string\">'Café'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>_c <span class=\"token keyword\">for</span> _c <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'é'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token number\">4</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> bs <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bs<span class=\"token punctuation\">)</span>\n<span class=\"token string\">b'Caf\\xc3\\xa9'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>bs<span class=\"token punctuation\">)</span>\n<span class=\"token number\">5</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Porting unicode(s, ‘utf-8’)</h2>\n<p>The\n<a href=\"https://docs.python.org/2.7/library/functions.html#unicode\">unicode()</a>\nbuilt-in function was removed in Python 3 so what is the best way to\nconvert the expression <code class=\"language-text\">unicode(s, &#39;utf-8&#39;)</code> so it works in both Python\n2 and 3?</p>\n<p>In Python 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token string\">'Café'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">unicode</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">u'Caf\\xe9'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">u'Caf\\xe9'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">unicode</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">True</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In Python 3:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token string\">'Café'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\nAttributeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'str'</span> <span class=\"token builtin\">object</span> has no attribute <span class=\"token string\">'decode'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>So, the real answer is…</p>\n<h2>Unicode Code Point</h2>\n<p><a href=\"https://docs.python.org/3/library/functions.html#ord\">ord</a> is a\npowerful built-in function to get a Unicode code point from a given\ncharacter. Consequently, If we want to check a Unicode code point of a\ncharacter, we can use <code class=\"language-text\">ord</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token string\">u'Café'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> _c <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'U+%04x'</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>_c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nU<span class=\"token operator\">+</span><span class=\"token number\">0043</span>\nU<span class=\"token operator\">+</span><span class=\"token number\">0061</span>\nU<span class=\"token operator\">+</span><span class=\"token number\">0066</span>\nU<span class=\"token operator\">+</span><span class=\"token number\">00e9</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> u <span class=\"token operator\">=</span> <span class=\"token string\">'中文'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> _c <span class=\"token keyword\">in</span> u<span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'U+%04x'</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>_c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nU<span class=\"token operator\">+</span><span class=\"token number\">4e2d</span>\nU<span class=\"token operator\">+</span><span class=\"token number\">6587</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Encoding</h2>\n<p>A <em>Unicode code point</em> transfers to a <em>byte string</em> is called encoding.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token string\">u'Café'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'bytes'</span><span class=\"token operator\">></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>Decoding</h2>\n<p>A <em>byte string</em> transfers to a <em>Unicode code point</em> is called decoding.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Café'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Café'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>Unicode Normalization</h2>\n<p>Some characters can be represented in two similar form. For example, the\ncharacter, <code class=\"language-text\">é</code> can be written as <code class=\"language-text\">e ́</code> (Canonical Decomposition) or <code class=\"language-text\">é</code>\n(Canonical Composition). In this case, we may acquire unexpected results\nwhen we are comparing two strings even though they look alike.\nTherefore, we can normalize a Unicode form to solve the issue.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># python 3</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> u1 <span class=\"token operator\">=</span> <span class=\"token string\">'Café'</span>       <span class=\"token comment\"># unicode string</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> u2 <span class=\"token operator\">=</span> <span class=\"token string\">'Cafe\\u0301'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> u1<span class=\"token punctuation\">,</span> u2\n<span class=\"token punctuation\">(</span><span class=\"token string\">'Café'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Café'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>u1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>u2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> u1 <span class=\"token operator\">==</span> u2\n<span class=\"token boolean\">False</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> u1<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># get u1 byte string</span>\n<span class=\"token string\">b'Caf\\xc3\\xa9'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> u2<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># get u2 byte string</span>\n<span class=\"token string\">b'Cafe\\xcc\\x81'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> unicodedata <span class=\"token keyword\">import</span> normalize\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s1 <span class=\"token operator\">=</span> normalize<span class=\"token punctuation\">(</span><span class=\"token string\">'NFC'</span><span class=\"token punctuation\">,</span> u1<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># get u1 NFC format</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s2 <span class=\"token operator\">=</span> normalize<span class=\"token punctuation\">(</span><span class=\"token string\">'NFC'</span><span class=\"token punctuation\">,</span> u2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># get u2 NFC format</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s1 <span class=\"token operator\">==</span> s2\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s1<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token string\">b'Caf\\xc3\\xa9'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'Caf\\xc3\\xa9'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s1 <span class=\"token operator\">=</span> normalize<span class=\"token punctuation\">(</span><span class=\"token string\">'NFD'</span><span class=\"token punctuation\">,</span> u1<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># get u1 NFD format</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s2 <span class=\"token operator\">=</span> normalize<span class=\"token punctuation\">(</span><span class=\"token string\">'NFD'</span><span class=\"token punctuation\">,</span> u2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># get u2 NFD format</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s1<span class=\"token punctuation\">,</span> s2\n<span class=\"token punctuation\">(</span><span class=\"token string\">'Café'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Café'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s1 <span class=\"token operator\">==</span> s2\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s1<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token string\">b'Cafe\\xcc\\x81'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'Cafe\\xcc\\x81'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Avoid <code class=\"language-text\">UnicodeDecodeError</code></h2>\n<p>Python raises UnicodeDecodeError when byte strings cannot decode to\nUnicode code points. If we want to avoid this exception, we can pass\n<em>replace</em>, <em>backslashreplace</em>, or <em>ignore</em> to errors argument in\n<a href=\"https://docs.python.org/3/library/stdtypes.html#bytes.decode\">decode</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> u <span class=\"token operator\">=</span> <span class=\"token string\">b\"\\xff\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> u<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'strict'</span><span class=\"token punctuation\">)</span>\n    Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\nUnicodeDecodeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'utf-8'</span> codec can't decode byte <span class=\"token number\">0xff</span> <span class=\"token keyword\">in</span> position <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> invalid start byte\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># use U+FFFD, REPLACEMENT CHARACTER</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> u<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"replace\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'\\ufffd'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># inserts a \\xNN escape sequence</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> u<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"backslashreplace\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'\\\\xff'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># leave the character out of the Unicode result</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> u<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ignore\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">''</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Long String</h2>\n<p>The following snippet shows common ways to declare a multi-line string\nin Python.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># original long string</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'This is a very very very long python string'</span>\n\n<span class=\"token comment\"># Single quote with an escaping backslash</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">\"This is a very very very \"</span> \\\n    <span class=\"token string\">\"long python string\"</span>\n\n<span class=\"token comment\"># Using brackets</span>\ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"This is a very very very \"</span>\n    <span class=\"token string\">\"long python string\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Using ``+``</span>\ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"This is a very very very \"</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">\"long python string\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Using triple-quote with an escaping backslash</span>\ns <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''This is a very very very \\\nlong python string'''</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"https://www.pythonsheets.com/\">Acesse a Referência original 1:</a>\n<a href=\"https://www.pythoncheatsheet.org/\">Acesse a Referência original 2:</a></p>","frontmatter":{"title":"Python tudo sobre Unicode","date":"January 05, 2020","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/python-unicode/","previous":{"fields":{"slug":"/python-concurrency/"},"frontmatter":{"title":"Python tudo sobre Concurrency"}},"next":{"fields":{"slug":"/python-dict/"},"frontmatter":{"title":"Python tudo sobre Dicionários"}}}}}