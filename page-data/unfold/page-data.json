{"componentChunkName":"component---src-templates-blog-post-js","path":"/unfold/","result":{"data":{"site":{"siteMetadata":{"title":"Python para impacientes"}},"markdownRemark":{"id":"105cf51f-8f5a-5479-9322-7f2fb554d5c5","excerpt":"Builds a list, using an iterator function and an initial seed value. The iterator function accepts one argument () and must always return a list with two…","html":"<p>Builds a list, using an iterator function and an initial seed value.</p>\n<p>The iterator function accepts one argument (<code class=\"language-text\">seed</code>) and must always return a list with two elements ([<code class=\"language-text\">value</code>, <code class=\"language-text\">nextSeed</code>]) or <code class=\"language-text\">False</code> to terminate.\nUse a generator function, <code class=\"language-text\">fn_generator</code>, that uses a <code class=\"language-text\">while</code> loop to call the iterator function and <code class=\"language-text\">yield</code> the <code class=\"language-text\">value</code> until it returns <code class=\"language-text\">False</code>.\nUse list comprehension to return the list that is produced by the generator, using the iterator function.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-py line-numbers\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">unfold</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">fn_generator</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span> \n      val <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> val <span class=\"token operator\">==</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">yield</span> val<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> fn_generator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> seed<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-py line-numbers\"><code class=\"language-py\">f <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> n<span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span> <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">50</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>n<span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\nunfold<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [-10, -20, -30, -40, -50]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><a href=\"https://www.pythonsheets.com/\">Acesse a Referência original 1:</a>\n<a href=\"https://www.pythoncheatsheet.org/\">Acesse a Referência original 2:</a></p>","frontmatter":{"title":"Python como usar o unfold","date":"January 04, 2020","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/unfold/","previous":{"fields":{"slug":"/count_occurences/"},"frontmatter":{"title":"Python como usar o count_occurences"}},"next":{"fields":{"slug":"/deep_flatten/"},"frontmatter":{"title":"Python como usar o deep_flatten"}}}}}