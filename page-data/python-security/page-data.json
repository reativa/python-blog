{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-security/","result":{"data":{"site":{"siteMetadata":{"title":"Python para impacientes"}},"markdownRemark":{"id":"15881bee-d386-5305-88c5-0e902317c7ae","excerpt":"Simple https server Generate a SSH key pair Get certificate information output: Generate a self-signed certificate output: Prepare a Certificate Signing Requestâ€¦","html":"<h1></h1>\n<h2>Simple https server</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># python2</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> BaseHTTPServer<span class=\"token punctuation\">,</span> SimpleHTTPServer\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> ssl\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> host<span class=\"token punctuation\">,</span> port <span class=\"token operator\">=</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5566</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> handler <span class=\"token operator\">=</span> SimpleHTTPServer<span class=\"token punctuation\">.</span>SimpleHTTPRequestHandler\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> httpd <span class=\"token operator\">=</span> BaseHTTPServer<span class=\"token punctuation\">.</span>HTTPServer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> httpd<span class=\"token punctuation\">.</span>socket <span class=\"token operator\">=</span> ssl<span class=\"token punctuation\">.</span>wrap_socket<span class=\"token punctuation\">(</span>httpd<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>                                certfile<span class=\"token operator\">=</span><span class=\"token string\">'./cert.crt'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>                                keyfile<span class=\"token operator\">=</span><span class=\"token string\">'./cert.key'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>                                server_side<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> httpd<span class=\"token punctuation\">.</span>serve_forever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># python3</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> http <span class=\"token keyword\">import</span> server\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> handler <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span>SimpleHTTPRequestHandler\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> ssl\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> host<span class=\"token punctuation\">,</span> port <span class=\"token operator\">=</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5566</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> httpd <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span>HTTPServer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> httpd<span class=\"token punctuation\">.</span>socket <span class=\"token operator\">=</span> ssl<span class=\"token punctuation\">.</span>wrap_socket<span class=\"token punctuation\">(</span>httpd<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>                                certfile<span class=\"token operator\">=</span><span class=\"token string\">'./cert.crt'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>                                keyfile<span class=\"token operator\">=</span><span class=\"token string\">'./cert.key'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>                                server_side<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> httpd<span class=\"token punctuation\">.</span>serve_forever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Generate a SSH key pair</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives <span class=\"token keyword\">import</span> serialization\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives<span class=\"token punctuation\">.</span>asymmetric <span class=\"token keyword\">import</span> rsa\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>backends <span class=\"token keyword\">import</span> default_backend\n\nkey <span class=\"token operator\">=</span> rsa<span class=\"token punctuation\">.</span>generate_private_key<span class=\"token punctuation\">(</span>\n    backend<span class=\"token operator\">=</span>default_backend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    public_exponent<span class=\"token operator\">=</span><span class=\"token number\">65537</span><span class=\"token punctuation\">,</span>\n    key_size<span class=\"token operator\">=</span><span class=\"token number\">2048</span>\n<span class=\"token punctuation\">)</span>\nprivate_key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>private_bytes<span class=\"token punctuation\">(</span>\n    serialization<span class=\"token punctuation\">.</span>Encoding<span class=\"token punctuation\">.</span>PEM<span class=\"token punctuation\">,</span>\n    serialization<span class=\"token punctuation\">.</span>PrivateFormat<span class=\"token punctuation\">.</span>PKCS8<span class=\"token punctuation\">,</span>\n    serialization<span class=\"token punctuation\">.</span>NoEncryption<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\npublic_key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>public_key<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>public_bytes<span class=\"token punctuation\">(</span>\n    serialization<span class=\"token punctuation\">.</span>Encoding<span class=\"token punctuation\">.</span>OpenSSH<span class=\"token punctuation\">,</span>\n    serialization<span class=\"token punctuation\">.</span>PublicFormat<span class=\"token punctuation\">.</span>OpenSSH\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id_rsa'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">,</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id_rsa.pub'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> g<span class=\"token punctuation\">:</span>\n    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>private_key<span class=\"token punctuation\">)</span>\n    g<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>public_key<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Get certificate information</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> cryptography <span class=\"token keyword\">import</span> x509\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>backends <span class=\"token keyword\">import</span> default_backend\n\nbackend <span class=\"token operator\">=</span> default_backend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./cert.crt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    crt_data <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    cert <span class=\"token operator\">=</span> x509<span class=\"token punctuation\">.</span>load_pem_x509_certificate<span class=\"token punctuation\">(</span>crt_data<span class=\"token punctuation\">,</span> backend<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Certificate</span><span class=\"token punctuation\">:</span>\n\n    _fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'country_name'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">'state_or_province_name'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">'locality_name'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">'organization_name'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">'organizational_unit_name'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">'common_name'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">'email_address'</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> cert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">assert</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>cert<span class=\"token punctuation\">,</span> x509<span class=\"token punctuation\">.</span>Certificate<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>_cert <span class=\"token operator\">=</span> cert\n        <span class=\"token keyword\">for</span> attr <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_fields<span class=\"token punctuation\">:</span>\n            oid <span class=\"token operator\">=</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>x509<span class=\"token punctuation\">,</span> <span class=\"token string\">'OID_'</span> <span class=\"token operator\">+</span> attr<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            subject <span class=\"token operator\">=</span> cert<span class=\"token punctuation\">.</span>subject\n            info <span class=\"token operator\">=</span> subject<span class=\"token punctuation\">.</span>get_attributes_for_oid<span class=\"token punctuation\">(</span>oid<span class=\"token punctuation\">)</span>\n            <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span>\n\n\ncert <span class=\"token operator\">=</span> Certificate<span class=\"token punctuation\">(</span>cert<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> attr <span class=\"token keyword\">in</span> cert<span class=\"token punctuation\">.</span>_fields<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> info <span class=\"token keyword\">in</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>cert<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}: {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>_oid<span class=\"token punctuation\">.</span>_name<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span>_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ genrsa -out cert.key\nGenerating RSA private key, <span class=\"token number\">1024</span> bit long modulus\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>++++++\n<span class=\"token punctuation\">..</span>.++++++\ne is <span class=\"token number\">65537</span> <span class=\"token punctuation\">(</span>0x10001<span class=\"token punctuation\">)</span>\n$ openssl req -x509 -new -nodes <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span>       -key cert.key -days <span class=\"token number\">365</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span>       -out cert.crt\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter <span class=\"token string\">'.'</span>, the field will be left blank.\n-----\nCountry Name <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> letter code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>AU<span class=\"token punctuation\">]</span>:TW\nState or Province Name <span class=\"token punctuation\">(</span>full name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>Some-State<span class=\"token punctuation\">]</span>:Taiwan\nLocality Name <span class=\"token punctuation\">(</span>eg, city<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>:Taipei\nOrganization Name <span class=\"token punctuation\">(</span>eg, company<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>Internet Widgits Pty Ltd<span class=\"token punctuation\">]</span>:personal\nOrganizational Unit Name <span class=\"token punctuation\">(</span>eg, section<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>:personal\nCommon Name <span class=\"token punctuation\">(</span>e.g. server FQDN or YOUR name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>:localhost\nEmail Address <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>:test@example.com\n$ python3 cert.py\ncountryName: TW\nstateOrProvinceName: Taiwan\nlocalityName: Taipei\norganizationName: personal\norganizationalUnitName: personal\ncommonName: localhost\nemailAddress: test@example.com</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Generate a self-signed certificate</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime<span class=\"token punctuation\">,</span> timedelta\n<span class=\"token keyword\">from</span> OpenSSL <span class=\"token keyword\">import</span> crypto\n\n<span class=\"token comment\"># load private key</span>\nftype <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span>FILETYPE_PEM\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key.pem'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span> k <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nk <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span>load_privatekey<span class=\"token punctuation\">(</span>ftype<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span>\n\nnow    <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nexpire <span class=\"token operator\">=</span> now <span class=\"token operator\">+</span> timedelta<span class=\"token punctuation\">(</span>days<span class=\"token operator\">=</span><span class=\"token number\">365</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># country (countryName, C)</span>\n<span class=\"token comment\"># state or province name (stateOrProvinceName, ST)</span>\n<span class=\"token comment\"># locality (locality, L)</span>\n<span class=\"token comment\"># organization (organizationName, O)</span>\n<span class=\"token comment\"># organizational unit (organizationalUnitName, OU)</span>\n<span class=\"token comment\"># common name (commonName, CN)</span>\n\ncert <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span>X509<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncert<span class=\"token punctuation\">.</span>get_subject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>C  <span class=\"token operator\">=</span> <span class=\"token string\">\"TW\"</span>\ncert<span class=\"token punctuation\">.</span>get_subject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ST <span class=\"token operator\">=</span> <span class=\"token string\">\"Taiwan\"</span>\ncert<span class=\"token punctuation\">.</span>get_subject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>L  <span class=\"token operator\">=</span> <span class=\"token string\">\"Taipei\"</span>\ncert<span class=\"token punctuation\">.</span>get_subject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>O  <span class=\"token operator\">=</span> <span class=\"token string\">\"pysheeet\"</span>\ncert<span class=\"token punctuation\">.</span>get_subject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>OU <span class=\"token operator\">=</span> <span class=\"token string\">\"cheat sheet\"</span>\ncert<span class=\"token punctuation\">.</span>get_subject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>CN <span class=\"token operator\">=</span> <span class=\"token string\">\"pythonsheets.com\"</span>\ncert<span class=\"token punctuation\">.</span>set_serial_number<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\ncert<span class=\"token punctuation\">.</span>set_notBefore<span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%Y%m%d%H%M%SZ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ncert<span class=\"token punctuation\">.</span>set_notAfter<span class=\"token punctuation\">(</span>expire<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%Y%m%d%H%M%SZ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ncert<span class=\"token punctuation\">.</span>set_issuer<span class=\"token punctuation\">(</span>cert<span class=\"token punctuation\">.</span>get_subject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ncert<span class=\"token punctuation\">.</span>set_pubkey<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\ncert<span class=\"token punctuation\">.</span>sign<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token string\">'sha1'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cert.pem'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>crypto<span class=\"token punctuation\">.</span>dump_certificate<span class=\"token punctuation\">(</span>ftype<span class=\"token punctuation\">,</span> cert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ openssl genrsa -out key.pem <span class=\"token number\">2048</span>\nGenerating RSA private key, <span class=\"token number\">2048</span> bit long modulus\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.+++\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>+++\ne is <span class=\"token number\">65537</span> <span class=\"token punctuation\">(</span>0x10001<span class=\"token punctuation\">)</span>\n$ python3 x509.py\n$ openssl x509 -subject -issuer -noout -in cert.pem\n<span class=\"token assign-left variable\">subject</span><span class=\"token operator\">=</span> /C<span class=\"token operator\">=</span>TW/ST<span class=\"token operator\">=</span>Taiwan/L<span class=\"token operator\">=</span>Taipei/O<span class=\"token operator\">=</span>pysheeet/OU<span class=\"token operator\">=</span>cheat sheet/CN<span class=\"token operator\">=</span>pythonsheets.com\n<span class=\"token assign-left variable\">issuer</span><span class=\"token operator\">=</span> /C<span class=\"token operator\">=</span>TW/ST<span class=\"token operator\">=</span>Taiwan/L<span class=\"token operator\">=</span>Taipei/O<span class=\"token operator\">=</span>pysheeet/OU<span class=\"token operator\">=</span>cheat sheet/CN<span class=\"token operator\">=</span>pythonsheets.com</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Prepare a Certificate Signing Request (csr)</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">from</span> OpenSSL <span class=\"token keyword\">import</span> crypto\n\n<span class=\"token comment\"># load private key</span>\nftype <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span>FILETYPE_PEM\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key.pem'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span> key <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nkey <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span>load_privatekey<span class=\"token punctuation\">(</span>ftype<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\nreq    <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span>X509Req<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nalt_name  <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">b\"DNS:www.pythonsheeets.com\"</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">b\"DNS:doc.pythonsheeets.com\"</span> <span class=\"token punctuation\">]</span>\nkey_usage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">b\"Digital Signature\"</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">b\"Non Repudiation\"</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">b\"Key Encipherment\"</span> <span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># country (countryName, C)</span>\n<span class=\"token comment\"># state or province name (stateOrProvinceName, ST)</span>\n<span class=\"token comment\"># locality (locality, L)</span>\n<span class=\"token comment\"># organization (organizationName, O)</span>\n<span class=\"token comment\"># organizational unit (organizationalUnitName, OU)</span>\n<span class=\"token comment\"># common name (commonName, CN)</span>\n\nreq<span class=\"token punctuation\">.</span>get_subject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>C  <span class=\"token operator\">=</span> <span class=\"token string\">\"TW\"</span>\nreq<span class=\"token punctuation\">.</span>get_subject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ST <span class=\"token operator\">=</span> <span class=\"token string\">\"Taiwan\"</span>\nreq<span class=\"token punctuation\">.</span>get_subject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>L  <span class=\"token operator\">=</span> <span class=\"token string\">\"Taipei\"</span>\nreq<span class=\"token punctuation\">.</span>get_subject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>O  <span class=\"token operator\">=</span> <span class=\"token string\">\"pysheeet\"</span>\nreq<span class=\"token punctuation\">.</span>get_subject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>OU <span class=\"token operator\">=</span> <span class=\"token string\">\"cheat sheet\"</span>\nreq<span class=\"token punctuation\">.</span>get_subject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>CN <span class=\"token operator\">=</span> <span class=\"token string\">\"pythonsheets.com\"</span>\nreq<span class=\"token punctuation\">.</span>add_extensions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    crypto<span class=\"token punctuation\">.</span>X509Extension<span class=\"token punctuation\">(</span> <span class=\"token string\">b\"basicConstraints\"</span><span class=\"token punctuation\">,</span>\n                          <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n                          <span class=\"token string\">b\"CA:FALSE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    crypto<span class=\"token punctuation\">.</span>X509Extension<span class=\"token punctuation\">(</span> <span class=\"token string\">b\"keyUsage\"</span><span class=\"token punctuation\">,</span>\n                          <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n                          <span class=\"token string\">b\",\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>key_usage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    crypto<span class=\"token punctuation\">.</span>X509Extension<span class=\"token punctuation\">(</span> <span class=\"token string\">b\"subjectAltName\"</span><span class=\"token punctuation\">,</span>\n                          <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n                          <span class=\"token string\">b\",\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>alt_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nreq<span class=\"token punctuation\">.</span>set_pubkey<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\nreq<span class=\"token punctuation\">.</span>sign<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sha256\"</span><span class=\"token punctuation\">)</span>\n\ncsr <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span>dump_certificate_request<span class=\"token punctuation\">(</span>ftype<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cert.csr\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>csr<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># create a root ca</span>\n$ openssl genrsa -out ca-key.pem <span class=\"token number\">2048</span>\nGenerating RSA private key, <span class=\"token number\">2048</span> bit long modulus\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.+++\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.+++\ne is <span class=\"token number\">65537</span> <span class=\"token punctuation\">(</span>0x10001<span class=\"token punctuation\">)</span>\n$ openssl req -x509 -new -nodes -key ca-key.pem <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> -days <span class=\"token number\">10000</span> -out ca.pem -subj <span class=\"token string\">\"/CN=root-ca\"</span>\n\n<span class=\"token comment\"># prepare a csr</span>\n$ openssl genrsa -out key.pem <span class=\"token number\">2048</span>\nGenerating RSA private key, <span class=\"token number\">2048</span> bit long modulus\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>+++\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>+++\ne is <span class=\"token number\">65537</span> <span class=\"token punctuation\">(</span>0x10001<span class=\"token punctuation\">)</span>\n$ python3 x509.py\n\n<span class=\"token comment\"># prepare openssl.cnf</span>\n<span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span>EOF <span class=\"token operator\">></span> openssl.cnf\n<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>req<span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> req_extensions <span class=\"token operator\">=</span> v3_req\n<span class=\"token operator\">></span> distinguished_name <span class=\"token operator\">=</span> req_distinguished_name\n<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>req_distinguished_name<span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> v3_req <span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> basicConstraints <span class=\"token operator\">=</span> CA:FALSE\n<span class=\"token operator\">></span> keyUsage <span class=\"token operator\">=</span> nonRepudiation, digitalSignature, keyEncipherment\n<span class=\"token operator\">></span> subjectAltName <span class=\"token operator\">=</span> @alt_names\n<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>alt_names<span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> DNS.1 <span class=\"token operator\">=</span> www.pythonsheets.com\n<span class=\"token operator\">></span> DNS.2 <span class=\"token operator\">=</span> doc.pythonsheets.com\n<span class=\"token operator\">></span> EOF\n\n<span class=\"token comment\"># sign a csr</span>\n$ openssl x509 -req -in cert.csr -CA ca.pem <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> -CAkey ca-key.pem -CAcreateserial -out cert.pem <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> -days <span class=\"token number\">365</span> -extensions v3_req -extfile openssl.cnf\nSignature ok\n<span class=\"token assign-left variable\">subject</span><span class=\"token operator\">=</span>/C<span class=\"token operator\">=</span>TW/ST<span class=\"token operator\">=</span>Taiwan/L<span class=\"token operator\">=</span>Taipei/O<span class=\"token operator\">=</span>pysheeet/OU<span class=\"token operator\">=</span>cheat sheet/CN<span class=\"token operator\">=</span>pythonsheets.com\nGetting CA Private Key\n\n<span class=\"token comment\"># check</span>\n$ openssl x509 -in cert.pem -text -noout</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Generate RSA keyfile without passphrase</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># $ openssl genrsa cert.key 2048</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>backends <span class=\"token keyword\">import</span> default_backend\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives <span class=\"token keyword\">import</span> serialization\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives<span class=\"token punctuation\">.</span>asymmetric <span class=\"token keyword\">import</span> rsa\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> key <span class=\"token operator\">=</span> rsa<span class=\"token punctuation\">.</span>generate_private_key<span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> public_exponent<span class=\"token operator\">=</span><span class=\"token number\">65537</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> key_size<span class=\"token operator\">=</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> backend<span class=\"token operator\">=</span>default_backend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cert.key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span>private_bytes<span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     encoding<span class=\"token operator\">=</span>serialization<span class=\"token punctuation\">.</span>Encoding<span class=\"token punctuation\">.</span>PEM<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token builtin\">format</span><span class=\"token operator\">=</span>serialization<span class=\"token punctuation\">.</span>PrivateFormat<span class=\"token punctuation\">.</span>TraditionalOpenSSL<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     encryption_algorithm<span class=\"token operator\">=</span>serialization<span class=\"token punctuation\">.</span>NoEncryption<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Sign a file by a given private key</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>PublicKey <span class=\"token keyword\">import</span> RSA\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Signature <span class=\"token keyword\">import</span> PKCS1_v1_5\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Hash <span class=\"token keyword\">import</span> SHA256\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">signer</span><span class=\"token punctuation\">(</span>privkey<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    rsakey <span class=\"token operator\">=</span> RSA<span class=\"token punctuation\">.</span>importKey<span class=\"token punctuation\">(</span>privkey<span class=\"token punctuation\">)</span>\n    signer <span class=\"token operator\">=</span> PKCS1_v1_5<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>rsakey<span class=\"token punctuation\">)</span>\n    digest <span class=\"token operator\">=</span> SHA256<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    digest<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> signer<span class=\"token punctuation\">.</span>sign<span class=\"token punctuation\">(</span>digest<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'private.key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span> key <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo.tgz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span> data <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nsign <span class=\"token operator\">=</span> signer<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo.tgz.sha256'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>sign<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># gernerate public &amp; private key</span>\n$ openssl genrsa -out private.key <span class=\"token number\">2048</span>\n$ openssl rsa -in private.key -pubout -out public.key\n\n$ python3 sign.py\n$ openssl dgst -sha256 -verify public.key -signature foo.tgz.sha256 foo.tgz\nVerified OK</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Verify a file from a signed digest</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>PublicKey <span class=\"token keyword\">import</span> RSA\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Signature <span class=\"token keyword\">import</span> PKCS1_v1_5\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Hash <span class=\"token keyword\">import</span> SHA256\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">verifier</span><span class=\"token punctuation\">(</span>pubkey<span class=\"token punctuation\">,</span> sig<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    rsakey <span class=\"token operator\">=</span> RSA<span class=\"token punctuation\">.</span>importKey<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    signer <span class=\"token operator\">=</span> PKCS1_v1_5<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>rsakey<span class=\"token punctuation\">)</span>\n    digest <span class=\"token operator\">=</span> SHA256<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    digest<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> signer<span class=\"token punctuation\">.</span>verify<span class=\"token punctuation\">(</span>digest<span class=\"token punctuation\">,</span> sig<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"public.key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span> key <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo.tgz.sha256\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span> sig <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo.tgz\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span> data <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> verifier<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> sig<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Verified OK\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Verification Failure\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># gernerate public &amp; private key</span>\n$ openssl genrsa -out private.key <span class=\"token number\">2048</span>\n$ openssl rsa -in private.key -pubout -out public.key\n\n<span class=\"token comment\"># do verification</span>\n$ <span class=\"token function\">cat</span> /dev/urandom <span class=\"token operator\">|</span> <span class=\"token function\">head</span> -c <span class=\"token number\">512</span> <span class=\"token operator\">|</span> base64 <span class=\"token operator\">></span> foo.txt\n$ <span class=\"token function\">tar</span> -zcf foo.tgz foo.txt\n$ openssl dgst -sha256 -sign private.key -out foo.tgz.sha256 foo.tgz\n$ python3 verify.py\nVerified OK\n\n<span class=\"token comment\"># do verification via openssl</span>\n$ openssl dgst -sha256 -verify public.key -signature foo.tgz.sha256 foo.tgz\nVerified OK</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Simple RSA encrypt via pem file</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">import</span> base64\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>PublicKey <span class=\"token keyword\">import</span> RSA\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> PKCS1_v1_5\n\nkey_text <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># import key via rsa module</span>\npubkey <span class=\"token operator\">=</span> RSA<span class=\"token punctuation\">.</span>importKey<span class=\"token punctuation\">(</span>key_text<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># create a cipher via PKCS1.5</span>\ncipher <span class=\"token operator\">=</span> PKCS1_v1_5<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>pubkey<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># encrypt</span>\ncipher_text <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span><span class=\"token string\">b\"Hello RSA!\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># do base64 encode</span>\ncipher_text <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>cipher_text<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cipher_text<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ openssl genrsa -out private.key <span class=\"token number\">2048</span>\n$ openssl rsa -in private.key -pubout -out public.key\n$ <span class=\"token function\">cat</span> public.key                                <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> python3 rsa.py                                <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl base64 -d -A                          <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl rsautl -decrypt -inkey private.key\nHello RSA<span class=\"token operator\">!</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Simple RSA encrypt via RSA module</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">import</span> base64\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>PublicKey <span class=\"token keyword\">import</span> RSA\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> PKCS1_v1_5\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>PublicKey<span class=\"token punctuation\">.</span>RSA <span class=\"token keyword\">import</span> construct\n\n<span class=\"token comment\"># prepare public key</span>\ne <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token string\">'10001'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\npubkey <span class=\"token operator\">=</span> construct<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># create a cipher via PKCS1.5</span>\ncipher <span class=\"token operator\">=</span> PKCS1_v1_5<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>pubkey<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># encrypt</span>\ncipher_text <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span><span class=\"token string\">b\"Hello RSA!\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># do base64 encode</span>\ncipher_text <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>cipher_text<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cipher_text<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ openssl genrsa -out private.key <span class=\"token number\">2048</span>\n$ openssl rsa -in private.key -pubout -out public.key\n$ <span class=\"token comment\"># check (n, e)</span>\n$ openssl rsa -pubin -inform PEM -text -noout <span class=\"token operator\">&lt;</span> public.key\nPublic-Key: <span class=\"token punctuation\">(</span><span class=\"token number\">2048</span> bit<span class=\"token punctuation\">)</span>\nModulus:\n    00:93:d5:58:0c:18:cf:91:f0:74:af:1b:40:09:73:\n    0c:d8:13:23:6c:44:60:0d:83:71:e6:f9:61:85:e5:\n    b2:d0:8a:73:5c:02:02:51:9a:4f:a7:ab:05:d5:74:\n    ff:4d:88:3d:e2:91:b8:b0:9f:7e:a9:a3:b2:3c:99:\n    1c:9a:42:4d:ac:2f:6a:e7:eb:0f:a7:e0:a5:81:e5:\n    <span class=\"token number\">98</span>:49:49:d5:15:3d:53:42:12:08:db:b0:e7:66:2d:\n    <span class=\"token number\">71</span>:5b:ea:55:4e:2d:9b:40:79:f8:7d:6e:5d:f4:a7:\n    d8:13:cb:13:91:c9:ac:5b:55:62:70:44:25:50:ca:\n    <span class=\"token number\">94</span>:de:78:5d:97:e8:a9:33:66:4f:90:10:00:62:21:\n    b6:60:52:65:76:bd:a3:3b:cf:2a:db:3f:66:5f:0d:\n    a3:35:ff:29:34:26:6d:63:a2:a6:77:96:5a:84:c7:\n    6a:0c:4f:48:52:70:11:8f:85:11:a0:78:f8:60:4b:\n    5d:d8:4b:b2:64:e5:ec:99:72:c5:a8:1b:ab:5c:09:\n    e1:80:70:91:06:22:ba:97:33:56:0b:65:d8:f3:35:\n    <span class=\"token number\">66</span>:f8:f9:ea:b9:84:64:8e:3c:14:f7:3d:1f:2c:67:\n    ce:64:cf:f9:c5:16:6b:03:a1:7a:c7:fa:4c:38:56:\n    ee:e0:4d:5f:ec:46:7e:1f:08:7c:e6:45:a1:fc:17:\n    1f:91\nExponent: <span class=\"token number\">65537</span> <span class=\"token punctuation\">(</span>0x10001<span class=\"token punctuation\">)</span>\n$ openssl rsa -pubin -in public.key -modulus -noout <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> <span class=\"token function\">cut</span> -d<span class=\"token string\">'='</span> -f <span class=\"token number\">2</span>                                    <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> python3 rsa.py                                    <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl base64 -d -A                              <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl rsautl -decrypt -inkey private.key\nHello RSA<span class=\"token operator\">!</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Simple RSA decrypt via pem file</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">import</span> base64\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>PublicKey <span class=\"token keyword\">import</span> RSA\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> PKCS1_v1_5\n\n<span class=\"token comment\"># read key file</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'private.key'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span> key_text <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># create a private key object</span>\nprivkey <span class=\"token operator\">=</span> RSA<span class=\"token punctuation\">.</span>importKey<span class=\"token punctuation\">(</span>key_text<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># create a cipher object</span>\ncipher <span class=\"token operator\">=</span> PKCS1_v1_5<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>privkey<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># decode base64</span>\ncipher_text <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># decrypt</span>\nplain_text <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>cipher_text<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>plain_text<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ openssl genrsa -out private.key <span class=\"token number\">2048</span>\n$ openssl rsa -in private.key -pubout -out public.key\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello openssl RSA encrypt\"</span>                 <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl rsautl -encrypt -pubin -inkey public.key <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl base64 -e -A                             <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> python3 rsa.py\nHello openssl RSA encrypt</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Simple RSA encrypt with OAEP</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">import</span> base64\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>PublicKey <span class=\"token keyword\">import</span> RSA\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> PKCS1_OAEP\n\n<span class=\"token comment\"># read key file</span>\nkey_text <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># create a public key object</span>\npubkey <span class=\"token operator\">=</span> RSA<span class=\"token punctuation\">.</span>importKey<span class=\"token punctuation\">(</span>key_text<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># create a cipher object</span>\ncipher <span class=\"token operator\">=</span> PKCS1_OAEP<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>pubkey<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># encrypt plain text</span>\ncipher_text <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span><span class=\"token string\">b\"Hello RSA OAEP!\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># encode via base64</span>\ncipher_text <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>cipher_text<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cipher_text<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ openssl genrsa -out private.key <span class=\"token number\">2048</span>\n$ openssl rsa -in private.key -pubout -out public.key\n$ <span class=\"token function\">cat</span> public.key         <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> python3 rsa.py         <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl base64 -d -A   <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl rsautl -decrypt -oaep -inkey private.key\nHello RSA OAEP<span class=\"token operator\">!</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Simple RSA decrypt with OAEP</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">import</span> base64\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>PublicKey <span class=\"token keyword\">import</span> RSA\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> PKCS1_OAEP\n\n<span class=\"token comment\"># read key file</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'private.key'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span> key_text <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># create a private key object</span>\nprivkey <span class=\"token operator\">=</span> RSA<span class=\"token punctuation\">.</span>importKey<span class=\"token punctuation\">(</span>key_text<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># create a cipher object</span>\ncipher <span class=\"token operator\">=</span> PKCS1_OAEP<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>privkey<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># decode base64</span>\ncipher_text <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># decrypt</span>\nplain_text <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>cipher_text<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>plain_text<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ openssl genrsa -out private.key <span class=\"token number\">2048</span>\n$ openssl rsa -in private.key -pubout -out public.key\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello RSA encrypt via OAEP\"</span>                      <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl rsautl -encrypt -pubin -oaep -inkey public.key <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl base64 -e -A                                   <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> python3 rsa.py\nHello RSA encrypt via OAEP</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Using DSA to proof of identity</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> socket\n\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>exceptions <span class=\"token keyword\">import</span> InvalidSignature\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>backends <span class=\"token keyword\">import</span> default_backend\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives <span class=\"token keyword\">import</span> hashes\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives<span class=\"token punctuation\">.</span>asymmetric <span class=\"token keyword\">import</span> dsa\n\nalice<span class=\"token punctuation\">,</span> bob <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socketpair<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">gen_dsa_key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    private_key <span class=\"token operator\">=</span> dsa<span class=\"token punctuation\">.</span>generate_private_key<span class=\"token punctuation\">(</span>\n        key_size<span class=\"token operator\">=</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span> backend<span class=\"token operator\">=</span>default_backend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> private_key<span class=\"token punctuation\">,</span> private_key<span class=\"token punctuation\">.</span>public_key<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">sign_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> private_key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    signature <span class=\"token operator\">=</span> private_key<span class=\"token punctuation\">.</span>sign<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> hashes<span class=\"token punctuation\">.</span>SHA256<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> signature\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">verify_data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> public_key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        public_key<span class=\"token punctuation\">.</span>verify<span class=\"token punctuation\">(</span>signature<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> hashes<span class=\"token punctuation\">.</span>SHA256<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> InvalidSignature<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv msg: {} not trust!\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"check msg: {} success!\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># generate alice private &amp; public key</span>\nalice_private_key<span class=\"token punctuation\">,</span> alice_public_key <span class=\"token operator\">=</span> gen_dsa_key<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># alice send message to bob, then bob recv</span>\nalice_msg <span class=\"token operator\">=</span> <span class=\"token string\">b\"Hello Bob\"</span>\nb <span class=\"token operator\">=</span> alice<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>alice_msg<span class=\"token punctuation\">)</span>\nbob_recv_msg <span class=\"token operator\">=</span> bob<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># alice send signature to bob, then bob recv</span>\nsignature <span class=\"token operator\">=</span> sign_data<span class=\"token punctuation\">(</span>alice_msg<span class=\"token punctuation\">,</span> alice_private_key<span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> alice<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>signature<span class=\"token punctuation\">)</span>\nbob_recv_signature <span class=\"token operator\">=</span> bob<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># bob check message recv from alice</span>\nverify_data<span class=\"token punctuation\">(</span>bob_recv_msg<span class=\"token punctuation\">,</span> bob_recv_signature<span class=\"token punctuation\">,</span> alice_public_key<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># attacker modify the msg will make the msg check fail</span>\nverify_data<span class=\"token punctuation\">(</span><span class=\"token string\">b\"I'm attacker!\"</span><span class=\"token punctuation\">,</span> bob_recv_signature<span class=\"token punctuation\">,</span> alice_public_key<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python3 test_dsa.py\ncheck msg: b<span class=\"token string\">'Hello Bob'</span> success<span class=\"token operator\">!</span>\nrecv msg: b<span class=\"token string\">\"I'm attacker!\"</span> not trust<span class=\"token operator\">!</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>Using AES CBC mode encrypt a file</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">import</span> struct\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives <span class=\"token keyword\">import</span> padding\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>backends <span class=\"token keyword\">import</span> default_backend\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives<span class=\"token punctuation\">.</span>ciphers <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    Cipher<span class=\"token punctuation\">,</span>\n    algorithms<span class=\"token punctuation\">,</span>\n    modes<span class=\"token punctuation\">)</span>\n\nbackend <span class=\"token operator\">=</span> default_backend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nkey <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span>\niv  <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>ptext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    pad <span class=\"token operator\">=</span> padding<span class=\"token punctuation\">.</span>PKCS7<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>padder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ptext <span class=\"token operator\">=</span> pad<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>ptext<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pad<span class=\"token punctuation\">.</span>finalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    alg <span class=\"token operator\">=</span> algorithms<span class=\"token punctuation\">.</span>AES<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    mode <span class=\"token operator\">=</span> modes<span class=\"token punctuation\">.</span>CBC<span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">)</span>\n    cipher <span class=\"token operator\">=</span> Cipher<span class=\"token punctuation\">(</span>alg<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">,</span> backend<span class=\"token operator\">=</span>backend<span class=\"token punctuation\">)</span>\n    encryptor <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span>encryptor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ctext <span class=\"token operator\">=</span> encryptor<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>ptext<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> encryptor<span class=\"token punctuation\">.</span>finalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> ctext\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key: {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iv: {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"usage: cmd [file] [enc file]\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># read plain text from file</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    plaintext <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># encrypt file</span>\nciphertext <span class=\"token operator\">=</span> encrypt<span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Encrypt file via AES-CBC\"</span> <span class=\"token operator\">></span> test.txt\n$ python3 aes.py test.txt test.enc\nkey: f239d9609e3f318b7afda7e4bb8db5b8734f504cf67f55e45dfe75f90d24fefc\niv: 8d6383b469f100d25293fb244ccb951e\n$ openssl aes-256-cbc -d -in test.enc -out secrets.txt.new            <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> -K f239d9609e3f318b7afda7e4bb8db5b8734f504cf67f55e45dfe75f90d24fefc <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> -iv 8d6383b469f100d25293fb244ccb951e\n$ <span class=\"token function\">cat</span> secrets.txt.new\nEncrypt <span class=\"token function\">file</span> via AES-CBC</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Using AES CBC mode decrypt a file</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">import</span> struct\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">from</span> binascii <span class=\"token keyword\">import</span> unhexlify\n\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives <span class=\"token keyword\">import</span> padding\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>backends <span class=\"token keyword\">import</span> default_backend\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives<span class=\"token punctuation\">.</span>ciphers <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    Cipher<span class=\"token punctuation\">,</span>\n    algorithms<span class=\"token punctuation\">,</span>\n    modes<span class=\"token punctuation\">)</span>\n\nbackend <span class=\"token operator\">=</span> default_backend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">,</span> ctext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    alg <span class=\"token operator\">=</span> algorithms<span class=\"token punctuation\">.</span>AES<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    mode <span class=\"token operator\">=</span> modes<span class=\"token punctuation\">.</span>CBC<span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">)</span>\n    cipher <span class=\"token operator\">=</span> Cipher<span class=\"token punctuation\">(</span>alg<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">,</span> backend<span class=\"token operator\">=</span>backend<span class=\"token punctuation\">)</span>\n    decryptor <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span>decryptor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ptext <span class=\"token operator\">=</span> decryptor<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>ctext<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> decryptor<span class=\"token punctuation\">.</span>finalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    unpadder <span class=\"token operator\">=</span> padding<span class=\"token punctuation\">.</span>PKCS7<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unpadder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 128 bit</span>\n    ptext <span class=\"token operator\">=</span> unpadder<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>ptext<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> unpadder<span class=\"token punctuation\">.</span>finalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> ptext\n\n<span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"usage: cmd [key] [iv] [file]\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># read cipher text from file</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    ciphertext <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># decrypt file</span>\nkey<span class=\"token punctuation\">,</span> iv <span class=\"token operator\">=</span> unhexlify<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> unhexlify<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplaintext <span class=\"token operator\">=</span> decrypt<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">,</span> ciphertext<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Encrypt file via AES-CBC\"</span> <span class=\"token operator\">></span> test.txt\n$ <span class=\"token assign-left variable\">key</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span>openssl rand -hex <span class=\"token number\">32</span><span class=\"token variable\">`</span></span>\n$ <span class=\"token assign-left variable\">iv</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span>openssl rand -hex <span class=\"token number\">16</span><span class=\"token variable\">`</span></span>\n$ openssl enc -aes-256-cbc -in test.txt -out test.enc -K <span class=\"token variable\">$key</span> -iv <span class=\"token variable\">$iv</span>\n$ python3 aes.py <span class=\"token variable\">$key</span> <span class=\"token variable\">$iv</span> test.enc</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>AES CBC mode encrypt via password (using cryptography)</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">import</span> base64\n<span class=\"token keyword\">import</span> struct\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">from</span> hashlib <span class=\"token keyword\">import</span> md5<span class=\"token punctuation\">,</span> sha1\n\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives <span class=\"token keyword\">import</span> padding\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>backends <span class=\"token keyword\">import</span> default_backend\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives<span class=\"token punctuation\">.</span>ciphers <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    Cipher<span class=\"token punctuation\">,</span>\n    algorithms<span class=\"token punctuation\">,</span>\n    modes<span class=\"token punctuation\">)</span>\n\nbackend <span class=\"token operator\">=</span> default_backend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">EVP_ByteToKey</span><span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">,</span> key_len<span class=\"token punctuation\">,</span> iv_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    buf <span class=\"token operator\">=</span> md<span class=\"token punctuation\">(</span>pwd <span class=\"token operator\">+</span> salt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>digest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    d <span class=\"token operator\">=</span> buf\n    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>iv_len <span class=\"token operator\">+</span> key_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        d <span class=\"token operator\">=</span> md<span class=\"token punctuation\">(</span>d <span class=\"token operator\">+</span> pwd <span class=\"token operator\">+</span> salt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>digest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        buf <span class=\"token operator\">+=</span> d\n    <span class=\"token keyword\">return</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>key_len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">[</span>key_len<span class=\"token punctuation\">:</span>key_len <span class=\"token operator\">+</span> iv_len<span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">aes_encrypt</span><span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">,</span> ptext<span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    key_len<span class=\"token punctuation\">,</span> iv_len <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span>\n\n    <span class=\"token comment\"># generate salt</span>\n    salt <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># generate key, iv from password</span>\n    key<span class=\"token punctuation\">,</span> iv <span class=\"token operator\">=</span> EVP_ByteToKey<span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">,</span> key_len<span class=\"token punctuation\">,</span> iv_len<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># pad plaintext</span>\n    pad <span class=\"token operator\">=</span> padding<span class=\"token punctuation\">.</span>PKCS7<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>padder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ptext <span class=\"token operator\">=</span> pad<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>ptext<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pad<span class=\"token punctuation\">.</span>finalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># create an encryptor</span>\n    alg <span class=\"token operator\">=</span> algorithms<span class=\"token punctuation\">.</span>AES<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    mode <span class=\"token operator\">=</span> modes<span class=\"token punctuation\">.</span>CBC<span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">)</span>\n    cipher <span class=\"token operator\">=</span> Cipher<span class=\"token punctuation\">(</span>alg<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">,</span> backend<span class=\"token operator\">=</span>backend<span class=\"token punctuation\">)</span>\n    encryptor <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span>encryptor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># encrypt plain text</span>\n    ctext <span class=\"token operator\">=</span> encryptor<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>ptext<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> encryptor<span class=\"token punctuation\">.</span>finalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ctext <span class=\"token operator\">=</span> <span class=\"token string\">b'Salted__'</span> <span class=\"token operator\">+</span> salt <span class=\"token operator\">+</span> ctext\n\n    <span class=\"token comment\"># encode base64</span>\n    ctext <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>ctext<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ctext\n\n\n<span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"usage: CMD [md]\"</span><span class=\"token punctuation\">)</span>\n\nmd <span class=\"token operator\">=</span> <span class=\"token builtin\">globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\nplaintext <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\npwd <span class=\"token operator\">=</span> <span class=\"token string\">b\"password\"</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>aes_encrypt<span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">,</span> plaintext<span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># with md5 digest</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Encrypt plaintext via AES-CBC from a given password\"</span> <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> python3 aes.py md5                                         <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl base64 -d -A                                       <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl aes-256-cbc -md md5 -d -k password\nEncrypt plaintext via AES-CBC from a given password\n\n<span class=\"token comment\"># with sha1 digest</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Encrypt plaintext via AES-CBC from a given password\"</span> <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> python3 aes.py sha1                                        <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl base64 -d -A                                       <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl aes-256-cbc -md sha1 -d -k password\nEncrypt plaintext via AES-CBC from a given password</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>AES CBC mode decrypt via password (using cryptography)</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">import</span> base64\n<span class=\"token keyword\">import</span> struct\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">from</span> hashlib <span class=\"token keyword\">import</span> md5<span class=\"token punctuation\">,</span> sha1\n\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives <span class=\"token keyword\">import</span> padding\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>backends <span class=\"token keyword\">import</span> default_backend\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives<span class=\"token punctuation\">.</span>ciphers <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    Cipher<span class=\"token punctuation\">,</span>\n    algorithms<span class=\"token punctuation\">,</span>\n    modes<span class=\"token punctuation\">)</span>\n\nbackend <span class=\"token operator\">=</span> default_backend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">EVP_ByteToKey</span><span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">,</span> key_len<span class=\"token punctuation\">,</span> iv_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    buf <span class=\"token operator\">=</span> md<span class=\"token punctuation\">(</span>pwd <span class=\"token operator\">+</span> salt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>digest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    d <span class=\"token operator\">=</span> buf\n    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>iv_len <span class=\"token operator\">+</span> key_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        d <span class=\"token operator\">=</span> md<span class=\"token punctuation\">(</span>d <span class=\"token operator\">+</span> pwd <span class=\"token operator\">+</span> salt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>digest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        buf <span class=\"token operator\">+=</span> d\n    <span class=\"token keyword\">return</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>key_len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">[</span>key_len<span class=\"token punctuation\">:</span>key_len <span class=\"token operator\">+</span> iv_len<span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">aes_decrypt</span><span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">,</span> ctext<span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ctext <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>ctext<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># check magic</span>\n    <span class=\"token keyword\">if</span> ctext<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">b'Salted__'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"bad magic number\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># get salt</span>\n    salt <span class=\"token operator\">=</span> ctext<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">:</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># generate key, iv from password</span>\n    key<span class=\"token punctuation\">,</span> iv <span class=\"token operator\">=</span> EVP_ByteToKey<span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># decrypt</span>\n    alg <span class=\"token operator\">=</span> algorithms<span class=\"token punctuation\">.</span>AES<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    mode <span class=\"token operator\">=</span> modes<span class=\"token punctuation\">.</span>CBC<span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">)</span>\n    cipher <span class=\"token operator\">=</span> Cipher<span class=\"token punctuation\">(</span>alg<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">,</span> backend<span class=\"token operator\">=</span>backend<span class=\"token punctuation\">)</span>\n    decryptor <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span>decryptor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ptext <span class=\"token operator\">=</span> decryptor<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>ctext<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> decryptor<span class=\"token punctuation\">.</span>finalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># unpad plaintext</span>\n    unpadder <span class=\"token operator\">=</span> padding<span class=\"token punctuation\">.</span>PKCS7<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unpadder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 128 bit</span>\n    ptext <span class=\"token operator\">=</span> unpadder<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>ptext<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> unpadder<span class=\"token punctuation\">.</span>finalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ptext<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"usage: CMD [md]\"</span><span class=\"token punctuation\">)</span>\n\nmd <span class=\"token operator\">=</span> <span class=\"token builtin\">globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\nciphertext <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\npwd <span class=\"token operator\">=</span> <span class=\"token string\">b\"password\"</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>aes_decrypt<span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">,</span> ciphertext<span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># with md5 digest</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Decrypt ciphertext via AES-CBC from a given password\"</span> <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl aes-256-cbc -e -md md5 -salt -A -k password         <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl base64 -e -A                                        <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> python3 aes.py md5\nDecrypt ciphertext via AES-CBC from a given password\n\n<span class=\"token comment\"># with sha1 digest</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Decrypt ciphertext via AES-CBC from a given password\"</span> <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl aes-256-cbc -e -md sha1 -salt -A -k password        <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl base64 -e -A                                        <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> python3 aes.py sha1\nDecrypt ciphertext via AES-CBC from a given password</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>AES CBC mode encrypt via password (using pycrypto)</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">import</span> struct\n<span class=\"token keyword\">import</span> base64\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token keyword\">from</span> hashlib <span class=\"token keyword\">import</span> md5<span class=\"token punctuation\">,</span> sha1\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Random<span class=\"token punctuation\">.</span>random <span class=\"token keyword\">import</span> getrandbits\n\n<span class=\"token comment\"># AES CBC requires blocks to be aligned on 16-byte boundaries.</span>\nBS <span class=\"token operator\">=</span> <span class=\"token number\">16</span>\n\npad <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> s<span class=\"token punctuation\">:</span> s <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>BS <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> BS<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>BS <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> BS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\nunpad <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> s <span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">EVP_ByteToKey</span><span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">,</span> key_len<span class=\"token punctuation\">,</span> iv_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    buf <span class=\"token operator\">=</span> md<span class=\"token punctuation\">(</span>pwd <span class=\"token operator\">+</span> salt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>digest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    d <span class=\"token operator\">=</span> buf\n    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>iv_len <span class=\"token operator\">+</span> key_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        d <span class=\"token operator\">=</span> md<span class=\"token punctuation\">(</span>d <span class=\"token operator\">+</span> pwd <span class=\"token operator\">+</span> salt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>digest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        buf <span class=\"token operator\">+=</span> d\n    <span class=\"token keyword\">return</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>key_len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">[</span>key_len<span class=\"token punctuation\">:</span>key_len <span class=\"token operator\">+</span> iv_len<span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">aes_encrypt</span><span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">,</span> plaintext<span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    key_len<span class=\"token punctuation\">,</span> iv_len <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span>\n\n    <span class=\"token comment\"># generate salt</span>\n    salt <span class=\"token operator\">=</span> struct<span class=\"token punctuation\">.</span>pack<span class=\"token punctuation\">(</span><span class=\"token string\">'=Q'</span><span class=\"token punctuation\">,</span> getrandbits<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># generate key, iv from password</span>\n    key<span class=\"token punctuation\">,</span> iv <span class=\"token operator\">=</span> EVP_ByteToKey<span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">,</span> key_len<span class=\"token punctuation\">,</span> iv_len<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># pad plaintext</span>\n    plaintext <span class=\"token operator\">=</span> pad<span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># create a cipher object</span>\n    cipher <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> AES<span class=\"token punctuation\">.</span>MODE_CBC<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># ref: openssl/apps/enc.c</span>\n    ciphertext <span class=\"token operator\">=</span> <span class=\"token string\">b'Salted__'</span> <span class=\"token operator\">+</span> salt <span class=\"token operator\">+</span> cipher<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># encode base64</span>\n    ciphertext <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ciphertext\n\n<span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"usage: CMD [md]\"</span><span class=\"token punctuation\">)</span>\n\nmd <span class=\"token operator\">=</span> <span class=\"token builtin\">globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\nplaintext <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\npwd <span class=\"token operator\">=</span> <span class=\"token string\">b\"password\"</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>aes_encrypt<span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">,</span> plaintext<span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># with md5 digest</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Encrypt plaintext via AES-CBC from a given password\"</span> <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> python3 aes.py md5                                         <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl base64 -d -A                                       <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl aes-256-cbc -md md5 -d -k password\nEncrypt plaintext via AES-CBC from a given password\n\n<span class=\"token comment\"># with sha1 digest</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Encrypt plaintext via AES-CBC from a given password\"</span> <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> python3 aes.py sha1                                        <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl base64 -d -A                                       <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl aes-256-cbc -md sha1 -d -k password\nEncrypt plaintext via AES-CBC from a given password</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>AES CBC mode decrypt via password (using pycrytpo)</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">import</span> struct\n<span class=\"token keyword\">import</span> base64\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token keyword\">from</span> hashlib <span class=\"token keyword\">import</span> md5<span class=\"token punctuation\">,</span> sha1\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Random<span class=\"token punctuation\">.</span>random <span class=\"token keyword\">import</span> getrandbits\n\n<span class=\"token comment\"># AES CBC requires blocks to be aligned on 16-byte boundaries.</span>\nBS <span class=\"token operator\">=</span> <span class=\"token number\">16</span>\n\nunpad <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> s <span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">EVP_ByteToKey</span><span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">,</span> key_len<span class=\"token punctuation\">,</span> iv_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    buf <span class=\"token operator\">=</span> md<span class=\"token punctuation\">(</span>pwd <span class=\"token operator\">+</span> salt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>digest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    d <span class=\"token operator\">=</span> buf\n    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>iv_len <span class=\"token operator\">+</span> key_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        d <span class=\"token operator\">=</span> md<span class=\"token punctuation\">(</span>d <span class=\"token operator\">+</span> pwd <span class=\"token operator\">+</span> salt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>digest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        buf <span class=\"token operator\">+=</span> d\n    <span class=\"token keyword\">return</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>key_len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">[</span>key_len<span class=\"token punctuation\">:</span>key_len <span class=\"token operator\">+</span> iv_len<span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">aes_decrypt</span><span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">,</span> ciphertext<span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ciphertext <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># check magic</span>\n    <span class=\"token keyword\">if</span> ciphertext<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">b'Salted__'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"bad magic number\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># get salt</span>\n    salt <span class=\"token operator\">=</span> ciphertext<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">:</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># get key, iv</span>\n    key<span class=\"token punctuation\">,</span> iv <span class=\"token operator\">=</span> EVP_ByteToKey<span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># decrypt</span>\n    cipher <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> AES<span class=\"token punctuation\">.</span>MODE_CBC<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> unpad<span class=\"token punctuation\">(</span>cipher<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"usage: CMD [md]\"</span><span class=\"token punctuation\">)</span>\n\nmd <span class=\"token operator\">=</span> <span class=\"token builtin\">globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\nciphertext <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\npwd <span class=\"token operator\">=</span> <span class=\"token string\">b\"password\"</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>aes_decrypt<span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">,</span> ciphertext<span class=\"token punctuation\">,</span> md<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># with md5 digest</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Decrypt ciphertext via AES-CBC from a given password\"</span> <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl aes-256-cbc -e -md md5 -salt -A -k password         <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl base64 -e -A                                        <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> python3 aes.py md5\nDecrypt ciphertext via AES-CBC from a given password\n\n<span class=\"token comment\"># with sha1 digest</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Decrypt ciphertext via AES-CBC from a given password\"</span> <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl aes-256-cbc -e -md sha1 -salt -A -k password        <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> openssl base64 -e -A                                        <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">></span> python3 aes.py sha1\nDecrypt ciphertext via AES-CBC from a given password</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Ephemeral Diffie Hellman Key Exchange via cryptography</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>backends <span class=\"token keyword\">import</span> default_backend\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives<span class=\"token punctuation\">.</span>asymmetric <span class=\"token keyword\">import</span> dh\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> params <span class=\"token operator\">=</span> dh<span class=\"token punctuation\">.</span>generate_parameters<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> default_backend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a_key <span class=\"token operator\">=</span> params<span class=\"token punctuation\">.</span>generate_private_key<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># alice's private key</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b_key <span class=\"token operator\">=</span> params<span class=\"token punctuation\">.</span>generate_private_key<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># bob's private key</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a_pub_key <span class=\"token operator\">=</span> a_key<span class=\"token punctuation\">.</span>public_key<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b_pub_key <span class=\"token operator\">=</span> b_key<span class=\"token punctuation\">.</span>public_key<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a_shared_key <span class=\"token operator\">=</span> a_key<span class=\"token punctuation\">.</span>exchange<span class=\"token punctuation\">(</span>b_pub_key<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b_shared_key <span class=\"token operator\">=</span> b_key<span class=\"token punctuation\">.</span>exchange<span class=\"token punctuation\">(</span>a_pub_key<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a_shared_key <span class=\"token operator\">==</span> b_shared_key\n<span class=\"token boolean\">True</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Calculate DH shared key manually via cryptography</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>backends <span class=\"token keyword\">import</span> default_backend\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives<span class=\"token punctuation\">.</span>asymmetric <span class=\"token keyword\">import</span> dh\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> int_from_bytes\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a_key <span class=\"token operator\">=</span> params<span class=\"token punctuation\">.</span>generate_private_key<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># alice's private key</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b_key <span class=\"token operator\">=</span> params<span class=\"token punctuation\">.</span>generate_private_key<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># bob's private key</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a_pub_key <span class=\"token operator\">=</span> a_key<span class=\"token punctuation\">.</span>public_key<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b_pub_key <span class=\"token operator\">=</span> b_key<span class=\"token punctuation\">.</span>public_key<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> shared_key <span class=\"token operator\">=</span> int_from_bytes<span class=\"token punctuation\">(</span>a_key<span class=\"token punctuation\">.</span>exchange<span class=\"token punctuation\">(</span>b_pub_key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'big'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> shared_key_manual <span class=\"token operator\">=</span> <span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>a_pub_key<span class=\"token punctuation\">.</span>public_numbers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>                         b_key<span class=\"token punctuation\">.</span>private_numbers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>                         params<span class=\"token punctuation\">.</span>parameter_numbers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> shared_key <span class=\"token operator\">==</span> shared_key_manual\n<span class=\"token boolean\">True</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Calculate DH shared key from (p, g, pubkey)</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>backends <span class=\"token keyword\">import</span> default_backend\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives<span class=\"token punctuation\">.</span>asymmetric <span class=\"token keyword\">import</span> dh\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> int_from_bytes\n\nbackend <span class=\"token operator\">=</span> default_backend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\np <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"11859949538425015739337467917303613431031019140213666\"</span>\n        <span class=\"token string\">\"12902540730065402658508634532306628480096346320424639\"</span>\n        <span class=\"token string\">\"0256567934582260424238844463330887962689642467123\"</span><span class=\"token punctuation\">)</span>\n\ng <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\ny <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"32155788395534640648739966373159697798396966919821525\"</span>\n        <span class=\"token string\">\"72238852825117261342483718574508213761865276905503199\"</span>\n        <span class=\"token string\">\"969908098203345481366464874759377454476688391248\"</span><span class=\"token punctuation\">)</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"409364065449673443397833358558926598469347813468816037\"</span>\n        <span class=\"token string\">\"268451847116982490733450463194921405069999008617231539\"</span>\n        <span class=\"token string\">\"7147035896687401350877308899732826446337707128\"</span><span class=\"token punctuation\">)</span>\n\nparams <span class=\"token operator\">=</span> dh<span class=\"token punctuation\">.</span>DHParameterNumbers<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">)</span>\npublic <span class=\"token operator\">=</span> dh<span class=\"token punctuation\">.</span>DHPublicNumbers<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\nprivate <span class=\"token operator\">=</span> dh<span class=\"token punctuation\">.</span>DHPrivateNumbers<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> public<span class=\"token punctuation\">)</span>\n\nkey <span class=\"token operator\">=</span> private<span class=\"token punctuation\">.</span>private_key<span class=\"token punctuation\">(</span>backend<span class=\"token punctuation\">)</span>\nshared_key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>exchange<span class=\"token punctuation\">(</span>public<span class=\"token punctuation\">.</span>public_key<span class=\"token punctuation\">(</span>backend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># check shared key</span>\nshared_key <span class=\"token operator\">=</span> int_from_bytes<span class=\"token punctuation\">(</span>shared_key<span class=\"token punctuation\">,</span> <span class=\"token string\">'big'</span><span class=\"token punctuation\">)</span>\nshared_key_manual <span class=\"token operator\">=</span> <span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># y^x mod p</span>\n\n<span class=\"token keyword\">assert</span> shared_key <span class=\"token operator\">==</span> shared_key_manual</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"https://www.pythonsheets.com/\">Acesse a ReferÃªncia original 1:</a>\n<a href=\"https://www.pythoncheatsheet.org/\">Acesse a ReferÃªncia original 2:</a></p>","frontmatter":{"title":"Python tudo sobre seguranÃ§a","date":"January 05, 2020","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/python-security/","previous":{"fields":{"slug":"/python-tests/"},"frontmatter":{"title":"Python tudo sobre Testes"}},"next":{"fields":{"slug":"/python-new-py3/"},"frontmatter":{"title":"Python tudo sobre novidades no Python3"}}}}}