{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-socket/","result":{"data":{"site":{"siteMetadata":{"title":"Python para impacientes"}},"markdownRemark":{"id":"529959fd-32e5-516b-8a07-ee1e5aca3502","excerpt":"Socket programming is inevitable for most programmers even though Python\nprovides much high-level networking interface such as httplib, urllib,\nimaplib…","html":"<h1></h1>\n<p>Socket programming is inevitable for most programmers even though Python\nprovides much high-level networking interface such as httplib, urllib,\nimaplib, telnetlib and so on. Some Unix-Like system’s interfaces were\ncalled through socket interface, e.g., Netlink, Kernel cryptography. To\ntemper a pain to read long-winded documents or source code, this cheat\nsheet tries to collect some common or uncommon snippets which are\nrelated to low-level socket programming.</p>\n<h2>Get Hostname</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> socket\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> socket<span class=\"token punctuation\">.</span>gethostname<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'MacBookPro-4380.local'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> hostname <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>gethostname<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> socket<span class=\"token punctuation\">.</span>gethostbyname<span class=\"token punctuation\">(</span>hostname<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'172.20.10.4'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> socket<span class=\"token punctuation\">.</span>gethostbyname<span class=\"token punctuation\">(</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'127.0.0.1'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Get address family and socket address from string</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> sys\n\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> res <span class=\"token keyword\">in</span> socket<span class=\"token punctuation\">.</span>getaddrinfo<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n                                  proto<span class=\"token operator\">=</span>socket<span class=\"token punctuation\">.</span>IPPROTO_TCP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        family <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        sockaddr <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>family<span class=\"token punctuation\">,</span> sockaddr<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> socket<span class=\"token punctuation\">.</span>gaierror<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ gai.py 192.0.2.244\nAddressFamily.AF_INET (&#39;192.0.2.244&#39;, 0)\n$ gai.py 2001:db8:f00d::1:d\nAddressFamily.AF_INET6 (&#39;2001:db8:f00d::1:d&#39;, 0, 0, 0)\n$ gai.py www.google.com\nAddressFamily.AF_INET6 (&#39;2607:f8b0:4006:818::2004&#39;, 0, 0, 0)\nAddressFamily.AF_INET (&#39;172.217.10.132&#39;, 0)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>It handles unusual cases, valid and invalid:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ gai.py 10.0.0.256  # octet overflow\nInvalid\n$ gai.py not-exist.example.com  # unresolvable\nInvalid\n$ gai.py fe80::1%eth0  # scoped\nAddressFamily.AF_INET6 (&#39;fe80::1%eth0&#39;, 0, 0, 2)\n$ gai.py ::ffff:192.0.2.128  # IPv4-Mapped\nAddressFamily.AF_INET6 (&#39;::ffff:192.0.2.128&#39;, 0, 0, 0)\n$ gai.py 0xc000027b  # IPv4 in hex\nAddressFamily.AF_INET (&#39;192.0.2.123&#39;, 0)\n$ gai.py 3221226198  # IPv4 in decimal\nAddressFamily.AF_INET (&#39;192.0.2.214&#39;, 0)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Transform Host &#x26; Network Endian</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># little-endian machine</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> socket\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\"># host endian</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> socket<span class=\"token punctuation\">.</span>htons<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># network endian</span>\n<span class=\"token number\">256</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> socket<span class=\"token punctuation\">.</span>htonl<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># network endian</span>\n<span class=\"token number\">16777216</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> socket<span class=\"token punctuation\">.</span>ntohs<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># host endian</span>\n<span class=\"token number\">1</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> socket<span class=\"token punctuation\">.</span>ntohl<span class=\"token punctuation\">(</span><span class=\"token number\">16777216</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># host endian</span>\n<span class=\"token number\">1</span>\n\n<span class=\"token comment\"># big-endian machine</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> socket\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\"># host endian</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> socket<span class=\"token punctuation\">.</span>htons<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># network endian</span>\n<span class=\"token number\">1</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> socket<span class=\"token punctuation\">.</span>htonl<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># network endian</span>\n1L\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> socket<span class=\"token punctuation\">.</span>ntohs<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># host endian</span>\n<span class=\"token number\">1</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> socket<span class=\"token punctuation\">.</span>ntohl<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># host endian</span>\n1L</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>IP dotted-quad string &#x26; byte format convert</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> socket\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> addr <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>inet_aton<span class=\"token punctuation\">(</span><span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> addr\n<span class=\"token string\">'\\x7f\\x00\\x00\\x01'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> socket<span class=\"token punctuation\">.</span>inet_ntoa<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'127.0.0.1'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Mac address &#x26; byte format convert</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> binascii\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mac <span class=\"token operator\">=</span> <span class=\"token string\">'00:11:32:3c:c3:0b'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> byte <span class=\"token operator\">=</span> binascii<span class=\"token punctuation\">.</span>unhexlify<span class=\"token punctuation\">(</span>mac<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> byte\n<span class=\"token string\">'\\x00\\x112&lt;\\xc3\\x0b'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> binascii<span class=\"token punctuation\">.</span>hexlify<span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'0011323cc30b'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Simple TCP Echo Server</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> socket\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Server</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_host <span class=\"token operator\">=</span> host\n        self<span class=\"token punctuation\">.</span>_port <span class=\"token operator\">=</span> port\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__enter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sock <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>\n        sock<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_SOCKET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        sock<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_host<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        sock<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>_sock <span class=\"token operator\">=</span> sock\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_sock\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__exit__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>exc_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> exc_info<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">import</span> traceback\n            traceback<span class=\"token punctuation\">.</span>print_exception<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>exc_info<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>_sock<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'localhost'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token number\">5566</span>\n    <span class=\"token keyword\">with</span> Server<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> <span class=\"token number\">5566</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> s<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            conn<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            msg <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n            conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n            conn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ nc localhost 5566\nHello World\nHello World</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>Simple TCP Echo Server through IPv6</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> contextlib\n<span class=\"token keyword\">import</span> socket\n\nhost <span class=\"token operator\">=</span> <span class=\"token string\">\"::1\"</span>\nport <span class=\"token operator\">=</span> <span class=\"token number\">5566</span>\n\n\n@contextlib<span class=\"token punctuation\">.</span>contextmanager\n<span class=\"token keyword\">def</span> <span class=\"token function\">server</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET6<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_SOCKET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> s\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">with</span> server<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> s<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            conn<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            msg <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">:</span>\n                conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n\n            conn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python3 ipv6.py <span class=\"token operator\">&amp;</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token number\">25752</span>\n$ <span class=\"token function\">nc</span> -6 ::1 <span class=\"token number\">5566</span>\nHello IPv6\nHello IPv6</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Disable IPv6 Only</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python3</span>\n\n<span class=\"token keyword\">import</span> contextlib\n<span class=\"token keyword\">import</span> socket\n\nhost <span class=\"token operator\">=</span> <span class=\"token string\">\"::\"</span>\nport <span class=\"token operator\">=</span> <span class=\"token number\">5566</span>\n\n@contextlib<span class=\"token punctuation\">.</span>contextmanager\n<span class=\"token keyword\">def</span> <span class=\"token function\">server</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET6<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_SOCKET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>IPPROTO_IPV6<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>IPV6_V6ONLY<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> s\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">with</span> server<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> s<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            conn<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            remote <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>getpeername<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>remote<span class=\"token punctuation\">)</span>\n            msg <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">:</span>\n                conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n\n            conn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python3 ipv6.py <span class=\"token operator\">&amp;</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token number\">23914</span>\n$ <span class=\"token function\">nc</span> -4 <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">5566</span>\n<span class=\"token punctuation\">(</span><span class=\"token string\">'::ffff:127.0.0.1'</span>, <span class=\"token number\">42604</span>, <span class=\"token number\">0</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nHello IPv4\nHello IPv4\n$ <span class=\"token function\">nc</span> -6 ::1 <span class=\"token number\">5566</span>\n<span class=\"token punctuation\">(</span><span class=\"token string\">'::1'</span>, <span class=\"token number\">50882</span>, <span class=\"token number\">0</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nHello IPv6\nHello IPv6\n$ <span class=\"token function\">nc</span> -6 fe80::a00:27ff:fe9b:50ee%enp0s3 <span class=\"token number\">5566</span>\n<span class=\"token punctuation\">(</span><span class=\"token string\">'fe80::a00:27ff:fe9b:50ee%enp0s3'</span>, <span class=\"token number\">42042</span>, <span class=\"token number\">0</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nHello IPv6\nHello IPv6</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Simple TCP Echo Server Via SocketServer</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> SocketServer\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> bh <span class=\"token operator\">=</span> SocketServer<span class=\"token punctuation\">.</span>BaseRequestHandler\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">handler</span><span class=\"token punctuation\">(</span>bh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   <span class=\"token keyword\">def</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     data <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>client_address<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>sendall<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> host <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5566</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> SocketServer<span class=\"token punctuation\">.</span>TCPServer<span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   host<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>serve_forever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ nc localhost 5566\nHello World\nHello World</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>Simple TLS/SSL TCP Echo Server</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> ssl\n\nsock <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nsock<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_SOCKET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nsock<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5566</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsock<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\nsslctx <span class=\"token operator\">=</span> ssl<span class=\"token punctuation\">.</span>SSLContext<span class=\"token punctuation\">(</span>ssl<span class=\"token punctuation\">.</span>PROTOCOL_TLSv1<span class=\"token punctuation\">)</span>\nsslctx<span class=\"token punctuation\">.</span>load_cert_chain<span class=\"token punctuation\">(</span>certfile<span class=\"token operator\">=</span><span class=\"token string\">'./root-ca.crt'</span><span class=\"token punctuation\">,</span>\n                       keyfile<span class=\"token operator\">=</span><span class=\"token string\">'./root-ca.key'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        conn<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> sock<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        sslconn <span class=\"token operator\">=</span> sslctx<span class=\"token punctuation\">.</span>wrap_socket<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> server_side<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        msg <span class=\"token operator\">=</span> sslconn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">:</span>\n            sslconn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n        sslconn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    sock<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># console 1</span>\n$ openssl genrsa -out root-ca.key <span class=\"token number\">2048</span>\n$ openssl req -x509 -new -nodes -key root-ca.key -days <span class=\"token number\">365</span> -out root-ca.crt\n$ python3 ssl_tcp_server.py\n\n<span class=\"token comment\"># console 2</span>\n$ openssl s_client -connect localhost:5566\n<span class=\"token punctuation\">..</span>.\nHello SSL\nHello SSL\nread:errno<span class=\"token operator\">=</span><span class=\"token number\">0</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Set ciphers on TLS/SSL TCP Echo Server</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> ssl\n\nsock <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nsock<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_SOCKET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nsock<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5566</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsock<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\nsslctx <span class=\"token operator\">=</span> ssl<span class=\"token punctuation\">.</span>SSLContext<span class=\"token punctuation\">(</span>ssl<span class=\"token punctuation\">.</span>PROTOCOL_SSLv23<span class=\"token punctuation\">)</span>\nsslctx<span class=\"token punctuation\">.</span>load_cert_chain<span class=\"token punctuation\">(</span>certfile<span class=\"token operator\">=</span><span class=\"token string\">'cert.pem'</span><span class=\"token punctuation\">,</span>\n                       keyfile<span class=\"token operator\">=</span><span class=\"token string\">'key.pem'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># set ssl ciphers</span>\nsslctx<span class=\"token punctuation\">.</span>set_ciphers<span class=\"token punctuation\">(</span><span class=\"token string\">'ECDH-ECDSA-AES128-GCM-SHA256'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>sslctx<span class=\"token punctuation\">.</span>get_ciphers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> indent<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        conn<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> sock<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        sslconn <span class=\"token operator\">=</span> sslctx<span class=\"token punctuation\">.</span>wrap_socket<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> server_side<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        msg <span class=\"token operator\">=</span> sslconn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">:</span>\n            sslconn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n        sslconn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    sock<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ openssl ecparam -out key.pem -genkey -name prime256v1\n$ openssl req -x509 -new -key key.pem -out cert.pem\n$ python3 tls.py<span class=\"token operator\">&amp;</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token number\">64565</span>\n<span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">50380845</span>,\n    <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ECDH-ECDSA-AES128-GCM-SHA256\"</span>,\n    <span class=\"token string\">\"protocol\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"TLSv1/SSLv3\"</span>,\n    <span class=\"token string\">\"description\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ECDH-ECDSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH/ECDSA Au=ECDH Enc=AESGCM(128) Mac=AEAD\"</span>,\n    <span class=\"token string\">\"strength_bits\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">128</span>,\n    <span class=\"token string\">\"alg_bits\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">128</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n$ openssl s_client -connect localhost:5566 -cipher <span class=\"token string\">\"ECDH-ECDSA-AES128-GCM-SHA256\"</span>\n<span class=\"token punctuation\">..</span>.\n---\nHello ECDH-ECDSA-AES128-GCM-SHA256\nHello ECDH-ECDSA-AES128-GCM-SHA256\nread:errno<span class=\"token operator\">=</span><span class=\"token number\">0</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Simple UDP Echo Server</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> socket\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UDPServer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_host <span class=\"token operator\">=</span> host\n        self<span class=\"token punctuation\">.</span>_port <span class=\"token operator\">=</span> port\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__enter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sock <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_DGRAM<span class=\"token punctuation\">)</span>\n        sock<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_host<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>_sock <span class=\"token operator\">=</span> sock\n        <span class=\"token keyword\">return</span> sock\n   <span class=\"token keyword\">def</span> <span class=\"token function\">__exit__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>exc_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> exc_info<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">import</span> traceback\n            traceback<span class=\"token punctuation\">.</span>print_exception<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>exc_info<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>_sock<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> <span class=\"token string\">'localhost'</span>\n    port <span class=\"token operator\">=</span> <span class=\"token number\">5566</span>\n    <span class=\"token keyword\">with</span> UDPServer<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> s<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            msg<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>recvfrom<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n            s<span class=\"token punctuation\">.</span>sendto<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ nc -u localhost 5566\nHello World\nHello World</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>Simple UDP Echo Server Via SocketServer</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> SocketServer\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> bh <span class=\"token operator\">=</span> SocketServer<span class=\"token punctuation\">.</span>BaseRequestHandler\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">handler</span><span class=\"token punctuation\">(</span>bh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   <span class=\"token keyword\">def</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     m<span class=\"token punctuation\">,</span>s <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>request\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     s<span class=\"token punctuation\">.</span>sendto<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>client_address<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>client_address<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> host <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5566</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> SocketServer<span class=\"token punctuation\">.</span>UDPServer<span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   host<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>serve_forever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ nc -u localhost 5566\nHello World\nHello World</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>Simple UDP client - Sender</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> socket\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> time\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> sock <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   socket<span class=\"token punctuation\">.</span>SOCK_DGRAM<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> host <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5566</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   sock<span class=\"token punctuation\">.</span>sendto<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\\n\"</span><span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ nc -lu localhost 5566\nHello\nHello</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>Broadcast UDP Packets</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> socket\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> time\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> sock <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_DGRAM<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> sock<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> sock<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_SOCKET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SO_BROADCAST<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   m <span class=\"token operator\">=</span> <span class=\"token string\">'{0}\\n'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   sock<span class=\"token punctuation\">.</span>sendto<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;broadcast>'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5566</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ nc -k -w 1 -ul 5566\n1431473025.72</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h2>Simple UNIX Domain Socket</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> contextlib\n<span class=\"token keyword\">import</span> os\n\n@contextlib<span class=\"token punctuation\">.</span>contextmanager\n<span class=\"token keyword\">def</span> <span class=\"token function\">DomainServer</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            os<span class=\"token punctuation\">.</span>unlink<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span>\n        sock <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_UNIX<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>\n        sock<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span>\n        sock<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> sock\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        sock<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            os<span class=\"token punctuation\">.</span>unlink<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span>\n\naddr <span class=\"token operator\">=</span> <span class=\"token string\">\"./domain.sock\"</span>\n<span class=\"token keyword\">with</span> DomainServer<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> sock<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        conn<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> sock<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        msg <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n        conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n        conn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ nc -U ./domain.sock\nHello\nHello</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>Simple duplex processes communication</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> socket\n\nchild<span class=\"token punctuation\">,</span> parent <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socketpair<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npid <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>fork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">if</span> pid <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chlid pid: {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        child<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">b'Hello Parent'</span><span class=\"token punctuation\">)</span>\n        msg <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p[{}] ---> c[{}]: {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>\n            os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'parent pid: {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># simple echo server (parent)</span>\n        msg <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c[{}] ---> p[{}]: {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>\n                pid<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        parent<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    child<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    parent<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ python3 socketpair_demo.py\nparent pid: <span class=\"token number\">9497</span>\nchlid pid: <span class=\"token number\">9498</span>\nc<span class=\"token punctuation\">[</span><span class=\"token number\">9498</span><span class=\"token punctuation\">]</span> ---<span class=\"token operator\">></span> p<span class=\"token punctuation\">[</span><span class=\"token number\">9497</span><span class=\"token punctuation\">]</span>: b<span class=\"token string\">'Hello Parent'</span>\np<span class=\"token punctuation\">[</span><span class=\"token number\">9497</span><span class=\"token punctuation\">]</span> ---<span class=\"token operator\">></span> c<span class=\"token punctuation\">[</span><span class=\"token number\">9498</span><span class=\"token punctuation\">]</span>: b<span class=\"token string\">'Hello Parent'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Simple Asynchronous TCP Server - Thread</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> Thread\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> socket\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     msg <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> sock <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> sock<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_SOCKET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> sock<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5566</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> sock<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   conn<span class=\"token punctuation\">,</span>addr <span class=\"token operator\">=</span> sock<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   t<span class=\"token operator\">=</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>work<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   t<span class=\"token punctuation\">.</span>daemon<span class=\"token operator\">=</span><span class=\"token boolean\">True</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output: (bash 1)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ nc localhost 5566\nHello\nHello</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>output: (bash 2)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ nc localhost 5566\nKer Ker\nKer Ker</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>Simple Asynchronous TCP Server - select</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> select <span class=\"token keyword\">import</span> select\n<span class=\"token keyword\">import</span> socket\n\nhost <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5566</span><span class=\"token punctuation\">)</span>\nsock <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>\nsock<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_SOCKET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nsock<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">)</span>\nsock<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nrl <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>sock<span class=\"token punctuation\">]</span>\nwl <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nml <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        r<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> select<span class=\"token punctuation\">(</span>rl<span class=\"token punctuation\">,</span> wl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># process ready to ready</span>\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> _ <span class=\"token operator\">==</span> sock<span class=\"token punctuation\">:</span>\n                conn<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> sock<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                rl<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                msg <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n                ml<span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> msg\n                wl<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># process ready to write</span>\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> w<span class=\"token punctuation\">:</span>\n            msg <span class=\"token operator\">=</span> ml<span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n            _<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n            wl<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">del</span> ml<span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n    sock<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output: (bash 1)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ nc localhost 5566\nHello\nHello</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>output: (bash 2)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ nc localhost 5566\nKer Ker\nKer Ker</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>Simple Asynchronous TCP Server - poll</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> select\n<span class=\"token keyword\">import</span> contextlib\n\nhost <span class=\"token operator\">=</span> <span class=\"token string\">'localhost'</span>\nport <span class=\"token operator\">=</span> <span class=\"token number\">5566</span>\n\ncon <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nreq <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nresp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n@contextlib<span class=\"token punctuation\">.</span>contextmanager\n<span class=\"token keyword\">def</span> <span class=\"token function\">Server</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_SOCKET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>setblocking<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> s\n    <span class=\"token keyword\">except</span> socket<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get socket error\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n@contextlib<span class=\"token punctuation\">.</span>contextmanager\n<span class=\"token keyword\">def</span> <span class=\"token function\">Poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        e <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span>poll<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> e\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> fd<span class=\"token punctuation\">,</span> c <span class=\"token keyword\">in</span> con<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            e<span class=\"token punctuation\">.</span>unregister<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n            c<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span> poll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    conn<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    conn<span class=\"token punctuation\">.</span>setblocking<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n    fd <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    poll<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> select<span class=\"token punctuation\">.</span>POLLIN<span class=\"token punctuation\">)</span>\n    req<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> conn\n    con<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> conn\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> poll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> fd <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> req<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n\n    conn <span class=\"token operator\">=</span> req<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n    msg <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">:</span>\n        resp<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> msg\n        poll<span class=\"token punctuation\">.</span>modify<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> select<span class=\"token punctuation\">.</span>POLLOUT<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        conn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">del</span> con<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">del</span> req<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> poll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> fd <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> resp<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n\n    conn <span class=\"token operator\">=</span> con<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n    msg <span class=\"token operator\">=</span> resp<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    total <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> total <span class=\"token operator\">></span> b<span class=\"token punctuation\">:</span>\n        l <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n        msg <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        b <span class=\"token operator\">+=</span> l\n\n    <span class=\"token keyword\">del</span> resp<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n    req<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> conn\n    poll<span class=\"token punctuation\">.</span>modify<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> select<span class=\"token punctuation\">.</span>POLLIN<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> Server<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> server<span class=\"token punctuation\">,</span> Poll<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> poll<span class=\"token punctuation\">:</span>\n\n        poll<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            events <span class=\"token operator\">=</span> poll<span class=\"token punctuation\">.</span>poll<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> fd<span class=\"token punctuation\">,</span> e <span class=\"token keyword\">in</span> events<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> fd <span class=\"token operator\">==</span> server<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    accept<span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span> poll<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">elif</span> e <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">.</span>POLLIN <span class=\"token operator\">|</span> select<span class=\"token punctuation\">.</span>POLLPRI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    recv<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> poll<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">elif</span> e <span class=\"token operator\">&amp;</span> select<span class=\"token punctuation\">.</span>POLLOUT<span class=\"token punctuation\">:</span>\n                    send<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> poll<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output: (bash 1)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ python3 poll.py &amp;\n[1] 3036\n$ nc localhost 5566\nHello poll\nHello poll\nHello Python Socket Programming\nHello Python Socket Programming</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output: (bash 2)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ nc localhost 5566\nHello Python\nHello Python\nHello Awesome Python\nHello Awesome Python</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Simple Asynchronous TCP Server - epoll</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> select\n<span class=\"token keyword\">import</span> contextlib\n\n\nhost <span class=\"token operator\">=</span> <span class=\"token string\">'localhost'</span>\nport <span class=\"token operator\">=</span> <span class=\"token number\">5566</span>\n\ncon <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nreq <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nresp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n@contextlib<span class=\"token punctuation\">.</span>contextmanager\n<span class=\"token keyword\">def</span> <span class=\"token function\">Server</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_SOCKET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>setblocking<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> s\n    <span class=\"token keyword\">except</span> socket<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get socket error\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n@contextlib<span class=\"token punctuation\">.</span>contextmanager\n<span class=\"token keyword\">def</span> <span class=\"token function\">Epoll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        e <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span>epoll<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> e\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> fd <span class=\"token keyword\">in</span> con<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">.</span>unregister<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n        e<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span> epoll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    conn<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    conn<span class=\"token punctuation\">.</span>setblocking<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    fd <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    epoll<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> select<span class=\"token punctuation\">.</span>EPOLLIN<span class=\"token punctuation\">)</span>\n    req<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> conn\n    con<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> conn\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> epoll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> fd <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> req<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n\n    conn <span class=\"token operator\">=</span> req<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n    msg <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">:</span>\n        resp<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> msg\n        epoll<span class=\"token punctuation\">.</span>modify<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> select<span class=\"token punctuation\">.</span>EPOLLOUT<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        conn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">del</span> con<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">del</span> req<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> epoll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> fd <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> resp<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n\n    conn <span class=\"token operator\">=</span> con<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n    msg <span class=\"token operator\">=</span> resp<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    total <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> total <span class=\"token operator\">></span> b<span class=\"token punctuation\">:</span>\n        l <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n        msg <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        b <span class=\"token operator\">+=</span> l\n\n    <span class=\"token keyword\">del</span> resp<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n    req<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> conn\n    epoll<span class=\"token punctuation\">.</span>modify<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> select<span class=\"token punctuation\">.</span>EPOLLIN<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> Server<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> server<span class=\"token punctuation\">,</span> Epoll<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> epoll<span class=\"token punctuation\">:</span>\n\n        epoll<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            events <span class=\"token operator\">=</span> epoll<span class=\"token punctuation\">.</span>poll<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> fd<span class=\"token punctuation\">,</span> e <span class=\"token keyword\">in</span> events<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> fd <span class=\"token operator\">==</span> server<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    accept<span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span> epoll<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">elif</span> e <span class=\"token operator\">&amp;</span> select<span class=\"token punctuation\">.</span>EPOLLIN<span class=\"token punctuation\">:</span>\n                    recv<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> epoll<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">elif</span> e <span class=\"token operator\">&amp;</span> select<span class=\"token punctuation\">.</span>EPOLLOUT<span class=\"token punctuation\">:</span>\n                    send<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> epoll<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output: (bash 1)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ python3 epoll.py &amp;\n[1] 3036\n$ nc localhost 5566\nHello epoll\nHello epoll\nHello Python Socket Programming\nHello Python Socket Programming</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output: (bash 2)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ nc localhost 5566\nHello Python\nHello Python\nHello Awesome Python\nHello Awesome Python</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Simple Asynchronous TCP Server - kqueue</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> select\n<span class=\"token keyword\">import</span> contextlib\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">,</span> <span class=\"token string\">'kqueue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not support kqueue\"</span><span class=\"token punctuation\">)</span>\n    exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\nhost <span class=\"token operator\">=</span> <span class=\"token string\">'localhost'</span>\nport <span class=\"token operator\">=</span> <span class=\"token number\">5566</span>\n\ncon <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nreq <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nresp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n@contextlib<span class=\"token punctuation\">.</span>contextmanager\n<span class=\"token keyword\">def</span> <span class=\"token function\">Server</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_SOCKET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>setblocking<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> s\n    <span class=\"token keyword\">except</span> socket<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get socket error\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n@contextlib<span class=\"token punctuation\">.</span>contextmanager\n<span class=\"token keyword\">def</span> <span class=\"token function\">Kqueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        kq <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span>kqueue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> kq\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        kq<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> fd<span class=\"token punctuation\">,</span> c <span class=\"token keyword\">in</span> con<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> c<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span> kq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    conn<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    conn<span class=\"token punctuation\">.</span>setblocking<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n    fd <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ke <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span>kevent<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                       select<span class=\"token punctuation\">.</span>KQ_FILTER_READ<span class=\"token punctuation\">,</span>\n                       select<span class=\"token punctuation\">.</span>KQ_EV_ADD<span class=\"token punctuation\">)</span>\n    kq<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>ke<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    req<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> conn\n    con<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> conn\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> kq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> fd <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> req<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n\n    conn <span class=\"token operator\">=</span> req<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n    msg <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">:</span>\n        resp<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> msg\n        <span class=\"token comment\"># remove read event</span>\n        ke <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span>kevent<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span>\n                           select<span class=\"token punctuation\">.</span>KQ_FILTER_READ<span class=\"token punctuation\">,</span>\n                           select<span class=\"token punctuation\">.</span>KQ_EV_DELETE<span class=\"token punctuation\">)</span>\n        kq<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>ke<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># add write event</span>\n        ke <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span>kevent<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span>\n                           select<span class=\"token punctuation\">.</span>KQ_FILTER_WRITE<span class=\"token punctuation\">,</span>\n                           select<span class=\"token punctuation\">.</span>KQ_EV_ADD<span class=\"token punctuation\">)</span>\n        kq<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>ke<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        req<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> conn\n        con<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> conn\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        conn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">del</span> con<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">del</span> req<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> kq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> fd <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> resp<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n\n    conn <span class=\"token operator\">=</span> con<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n    msg <span class=\"token operator\">=</span> resp<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    total <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> total <span class=\"token operator\">></span> b<span class=\"token punctuation\">:</span>\n        l <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n        msg <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        b <span class=\"token operator\">+=</span> l\n\n    <span class=\"token keyword\">del</span> resp<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n    req<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> conn\n    <span class=\"token comment\"># remove write event</span>\n    ke <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span>kevent<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span>\n                       select<span class=\"token punctuation\">.</span>KQ_FILTER_WRITE<span class=\"token punctuation\">,</span>\n                       select<span class=\"token punctuation\">.</span>KQ_EV_DELETE<span class=\"token punctuation\">)</span>\n    kq<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>ke<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># add read event</span>\n    ke <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span>kevent<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span>\n                       select<span class=\"token punctuation\">.</span>KQ_FILTER_READ<span class=\"token punctuation\">,</span>\n                       select<span class=\"token punctuation\">.</span>KQ_EV_ADD<span class=\"token punctuation\">)</span>\n    kq<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>ke<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> Server<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> server<span class=\"token punctuation\">,</span> Kqueue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> kq<span class=\"token punctuation\">:</span>\n\n        max_events <span class=\"token operator\">=</span> <span class=\"token number\">1024</span>\n        timeout <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n        ke <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span>kevent<span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                           select<span class=\"token punctuation\">.</span>KQ_FILTER_READ<span class=\"token punctuation\">,</span>\n                           select<span class=\"token punctuation\">.</span>KQ_EV_ADD<span class=\"token punctuation\">)</span>\n\n        kq<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>ke<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            events <span class=\"token operator\">=</span> kq<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> max_events<span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> e <span class=\"token keyword\">in</span> events<span class=\"token punctuation\">:</span>\n                fd <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>ident\n                <span class=\"token keyword\">if</span> fd <span class=\"token operator\">==</span> server<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    accept<span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span> kq<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">elif</span> e<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span> <span class=\"token operator\">==</span> select<span class=\"token punctuation\">.</span>KQ_FILTER_READ<span class=\"token punctuation\">:</span>\n                    recv<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> kq<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">elif</span> e<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span> <span class=\"token operator\">==</span> select<span class=\"token punctuation\">.</span>KQ_FILTER_WRITE<span class=\"token punctuation\">:</span>\n                    send<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> kq<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output: (bash 1)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ python3 kqueue.py &amp;\n[1] 3036\n$ nc localhost 5566\nHello kqueue\nHello kqueue\nHello Python Socket Programming\nHello Python Socket Programming</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output: (bash 2)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ nc localhost 5566\nHello Python\nHello Python\nHello Awesome Python\nHello Awesome Python</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>High-Level API - selectors</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># Pyton3.4+ only</span>\n<span class=\"token comment\"># Reference: selectors</span>\n<span class=\"token keyword\">import</span> selectors\n<span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> contextlib\n\n@contextlib<span class=\"token punctuation\">.</span>contextmanager\n<span class=\"token keyword\">def</span> <span class=\"token function\">Server</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_SOCKET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        sel <span class=\"token operator\">=</span> selectors<span class=\"token punctuation\">.</span>DefaultSelector<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> s<span class=\"token punctuation\">,</span> sel\n    <span class=\"token keyword\">except</span> socket<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get socket error\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">:</span>\n            s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">read_handler</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> sel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    msg <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">:</span>\n        conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        sel<span class=\"token punctuation\">.</span>unregister<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\n        conn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">accept_handler</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> sel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    conn<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sel<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> selectors<span class=\"token punctuation\">.</span>EVENT_READ<span class=\"token punctuation\">,</span> read_handler<span class=\"token punctuation\">)</span>\n\nhost <span class=\"token operator\">=</span> <span class=\"token string\">'localhost'</span>\nport <span class=\"token operator\">=</span> <span class=\"token number\">5566</span>\n<span class=\"token keyword\">with</span> Server<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>sel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sel<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> selectors<span class=\"token punctuation\">.</span>EVENT_READ<span class=\"token punctuation\">,</span> accept_handler<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        events <span class=\"token operator\">=</span> sel<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> sel_key<span class=\"token punctuation\">,</span> m <span class=\"token keyword\">in</span> events<span class=\"token punctuation\">:</span>\n            handler <span class=\"token operator\">=</span> sel_key<span class=\"token punctuation\">.</span>data\n            handler<span class=\"token punctuation\">(</span>sel_key<span class=\"token punctuation\">.</span>fileobj<span class=\"token punctuation\">,</span> sel<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output: (bash 1)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ nc localhost 5566\nHello\nHello</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>output: (bash 1)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ nc localhost 5566\nHi\nHi</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>Simple Non-blocking TLS/SSL socket via selectors</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> selectors\n<span class=\"token keyword\">import</span> contextlib\n<span class=\"token keyword\">import</span> ssl\n\n<span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> partial\n\nsslctx <span class=\"token operator\">=</span> ssl<span class=\"token punctuation\">.</span>create_default_context<span class=\"token punctuation\">(</span>ssl<span class=\"token punctuation\">.</span>Purpose<span class=\"token punctuation\">.</span>CLIENT_AUTH<span class=\"token punctuation\">)</span>\nsslctx<span class=\"token punctuation\">.</span>load_cert_chain<span class=\"token punctuation\">(</span>certfile<span class=\"token operator\">=</span><span class=\"token string\">\"cert.pem\"</span><span class=\"token punctuation\">,</span> keyfile<span class=\"token operator\">=</span><span class=\"token string\">\"key.pem\"</span><span class=\"token punctuation\">)</span>\n\n@contextlib<span class=\"token punctuation\">.</span>contextmanager\n<span class=\"token keyword\">def</span> <span class=\"token function\">Server</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_SOCKET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        sel <span class=\"token operator\">=</span> selectors<span class=\"token punctuation\">.</span>DefaultSelector<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> s<span class=\"token punctuation\">,</span> sel\n    <span class=\"token keyword\">except</span> socket<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get socket error\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> sel<span class=\"token punctuation\">:</span> sel<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> sel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    conn<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sslconn <span class=\"token operator\">=</span> sslctx<span class=\"token punctuation\">.</span>wrap_socket<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span>\n                                 server_side<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                                 do_handshake_on_connect<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n    sel<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>sslconn<span class=\"token punctuation\">,</span> selectors<span class=\"token punctuation\">.</span>EVENT_READ<span class=\"token punctuation\">,</span> do_handshake<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">do_handshake</span><span class=\"token punctuation\">(</span>sslconn<span class=\"token punctuation\">,</span> sel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sslconn<span class=\"token punctuation\">.</span>do_handshake<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sel<span class=\"token punctuation\">.</span>modify<span class=\"token punctuation\">(</span>sslconn<span class=\"token punctuation\">,</span> selectors<span class=\"token punctuation\">.</span>EVENT_READ<span class=\"token punctuation\">,</span> read<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>sslconn<span class=\"token punctuation\">,</span> sel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    msg <span class=\"token operator\">=</span> sslconn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">:</span>\n        sel<span class=\"token punctuation\">.</span>modify<span class=\"token punctuation\">(</span>sslconn<span class=\"token punctuation\">,</span>\n                   selectors<span class=\"token punctuation\">.</span>EVENT_WRITE<span class=\"token punctuation\">,</span>\n                   partial<span class=\"token punctuation\">(</span>write<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">=</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        sel<span class=\"token punctuation\">.</span>unregister<span class=\"token punctuation\">(</span>sslconn<span class=\"token punctuation\">)</span>\n        sslconn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>sslconn<span class=\"token punctuation\">,</span> sel<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">:</span>\n        sslconn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n    sel<span class=\"token punctuation\">.</span>modify<span class=\"token punctuation\">(</span>sslconn<span class=\"token punctuation\">,</span> selectors<span class=\"token punctuation\">.</span>EVENT_READ<span class=\"token punctuation\">,</span> read<span class=\"token punctuation\">)</span>\n\n\nhost <span class=\"token operator\">=</span> <span class=\"token string\">'localhost'</span>\nport <span class=\"token operator\">=</span> <span class=\"token number\">5566</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> Server<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>sel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sel<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> selectors<span class=\"token punctuation\">.</span>EVENT_READ<span class=\"token punctuation\">,</span> accept<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            events <span class=\"token operator\">=</span> sel<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> sel_key<span class=\"token punctuation\">,</span> m <span class=\"token keyword\">in</span> events<span class=\"token punctuation\">:</span>\n                handler <span class=\"token operator\">=</span> sel_key<span class=\"token punctuation\">.</span>data\n                handler<span class=\"token punctuation\">(</span>sel_key<span class=\"token punctuation\">.</span>fileobj<span class=\"token punctuation\">,</span> sel<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\"># console 1\n$ openssl genrsa -out key.pem 2048\n$ openssl req -x509 -new -nodes -key key.pem -days 365 -out cert.pem\n$ python3 ssl_tcp_server.py &amp;\n$ openssl s_client -connect localhost:5566\n...\n---\nHello TLS\nHello TLS\n\n# console 2\n$ openssl s_client -connect localhost:5566\n...\n---\nHello SSL\nHello SSL</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>“socketpair” - Similar to PIPE</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> time\n\nc_s<span class=\"token punctuation\">,</span> p_s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socketpair<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    pid <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>fork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> OSError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fork Error\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">raise</span>\n\n<span class=\"token keyword\">if</span> pid<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># parent process</span>\n    c_s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        p_s<span class=\"token punctuation\">.</span>sendall<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi! Child!\"</span><span class=\"token punctuation\">)</span>\n        msg <span class=\"token operator\">=</span> p_s<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    os<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># child process</span>\n    p_s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        msg <span class=\"token operator\">=</span> c_s<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n        c_s<span class=\"token punctuation\">.</span>sendall<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi! Parent!\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ python ex.py\nHi! Child!\nHi! Parent!\nHi! Child!\nHi! Parent!\n...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Using sendfile do copy</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># need python 3.3 or above</span>\n<span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> sys\n\n<span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage: cmd src dst\"</span><span class=\"token punctuation\">)</span>\n    exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nsrc <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ndst <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> s<span class=\"token punctuation\">,</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> d<span class=\"token punctuation\">:</span>\n    st <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>fstat<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">4096</span>\n    s_len <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span>st_size\n\n    sfd <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    dfd <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">while</span> s_len <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        ret <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>sendfile<span class=\"token punctuation\">(</span>dfd<span class=\"token punctuation\">,</span> sfd<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span>\n        offset <span class=\"token operator\">+=</span> ret\n        s_len <span class=\"token operator\">-=</span> ret</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ dd if=/dev/urandom of=dd.in bs=1M count=1024\n1024+0 records in\n1024+0 records out\n1073741824 bytes (1.1 GB, 1.0 GiB) copied, 108.02 s, 9.9 MB/s\n$ python3 sendfile.py dd.in dd.out\n$ md5sum dd.in\ne79afdd6aba71b7174142c0bbc289674  dd.in\n$ md5sum dd.out\ne79afdd6aba71b7174142c0bbc289674  dd.out</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Sending a file through sendfile</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># need python 3.5 or above</span>\n<span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> print_function<span class=\"token punctuation\">,</span> unicode_literals\n\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> contextlib\n\n@contextlib<span class=\"token punctuation\">.</span>contextmanager\n<span class=\"token keyword\">def</span> <span class=\"token function\">server</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_SOCKET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        s<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> s\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n@contextlib<span class=\"token punctuation\">.</span>contextmanager\n<span class=\"token keyword\">def</span> <span class=\"token function\">client</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        c <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>\n        c<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> c\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        c<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">do_sendfile</span><span class=\"token punctuation\">(</span>fout<span class=\"token punctuation\">,</span> fin<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> fin_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    l <span class=\"token operator\">=</span> fin_len\n    offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> l <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        ret <span class=\"token operator\">=</span> fout<span class=\"token punctuation\">.</span>sendfile<span class=\"token punctuation\">(</span>fin<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span>\n        offset <span class=\"token operator\">+=</span> ret\n        l <span class=\"token operator\">-=</span> ret\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">do_recv</span><span class=\"token punctuation\">(</span>fout<span class=\"token punctuation\">,</span> fin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> fin<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> data<span class=\"token punctuation\">:</span> <span class=\"token keyword\">break</span>\n\n        fout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n\nhost <span class=\"token operator\">=</span> <span class=\"token string\">'localhost'</span>\nport <span class=\"token operator\">=</span> <span class=\"token number\">5566</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"usage: cmd src dst\"</span><span class=\"token punctuation\">)</span>\n    exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nsrc <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ndst <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\noffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\npid <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>fork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> pid <span class=\"token operator\">==</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># client</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">with</span> client<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> c<span class=\"token punctuation\">,</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        fd <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        st <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>fstat<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">=</span> <span class=\"token number\">4096</span>\n\n        flen <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span>st_size\n        do_sendfile<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> flen<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># server</span>\n    <span class=\"token keyword\">with</span> server<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> s<span class=\"token punctuation\">,</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        conn<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        do_recv<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> conn<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ dd if=/dev/urandom of=dd.in bs=1M count=512\n512+0 records in\n512+0 records out\n536870912 bytes (537 MB, 512 MiB) copied, 3.17787 s, 169 MB/s\n$ python3 sendfile.py dd.in dd.out\n$ md5sum dd.in\neadfd96c85976b1f46385e89dfd9c4a8  dd.in\n$ md5sum dd.out\neadfd96c85976b1f46385e89dfd9c4a8  dd.out</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Linux kernel Crypto API - AF_ALG</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># need python 3.6 or above &amp; Linux >=2.6.38</span>\n<span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> hashlib\n<span class=\"token keyword\">import</span> contextlib\n\n@contextlib<span class=\"token punctuation\">.</span>contextmanager\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_alg</span><span class=\"token punctuation\">(</span>typ<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_ALG<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_SEQPACKET<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>typ<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> s\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmsg <span class=\"token operator\">=</span> <span class=\"token string\">b'Python is awesome!'</span>\n\n<span class=\"token keyword\">with</span> create_alg<span class=\"token punctuation\">(</span><span class=\"token string\">'hash'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sha256'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> algo<span class=\"token punctuation\">:</span>\n    op<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> algo<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">with</span> op<span class=\"token punctuation\">:</span>\n        op<span class=\"token punctuation\">.</span>sendall<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n        data <span class=\"token operator\">=</span> op<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># check data</span>\n        h <span class=\"token operator\">=</span> hashlib<span class=\"token punctuation\">.</span>sha256<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>digest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> h <span class=\"token operator\">!=</span> data<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"sha256(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>h<span class=\"token punctuation\">}</span></span><span class=\"token string\">) != af_alg(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ python3 af_alg.py\n9d50bcac2d5e33f936ec2db7dc7b6579cba8e1b099d77c31d8564df46f66bdf5</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h2>AES-CBC encrypt/decrypt via AF_ALG</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># need python 3.6 or above &amp; Linux >=4.3</span>\n<span class=\"token keyword\">import</span> contextlib\n<span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> os\n\nBS <span class=\"token operator\">=</span> <span class=\"token number\">16</span>  <span class=\"token comment\"># Bytes</span>\npad <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> s<span class=\"token punctuation\">:</span> s <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>BS <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> BS<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> \\\n                 <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>BS <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> BS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n\nupad <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> s <span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n\n@contextlib<span class=\"token punctuation\">.</span>contextmanager\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_alg</span><span class=\"token punctuation\">(</span>typ<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_ALG<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_SEQPACKET<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>typ<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> s\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ciphertext <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">with</span> create_alg<span class=\"token punctuation\">(</span><span class=\"token string\">'skcipher'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cbc(aes)'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> algo<span class=\"token punctuation\">:</span>\n        algo<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_ALG<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>ALG_SET_KEY<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n        op<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> algo<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">with</span> op<span class=\"token punctuation\">:</span>\n            plaintext <span class=\"token operator\">=</span> pad<span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">)</span>\n            op<span class=\"token punctuation\">.</span>sendmsg_afalg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>plaintext<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                             op<span class=\"token operator\">=</span>socket<span class=\"token punctuation\">.</span>ALG_OP_ENCRYPT<span class=\"token punctuation\">,</span>\n                             iv<span class=\"token operator\">=</span>iv<span class=\"token punctuation\">)</span>\n            ciphertext <span class=\"token operator\">=</span> op<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> ciphertext\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    plaintext <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">with</span> create_alg<span class=\"token punctuation\">(</span><span class=\"token string\">'skcipher'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cbc(aes)'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> algo<span class=\"token punctuation\">:</span>\n        algo<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_ALG<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>ALG_SET_KEY<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n        op<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> algo<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">with</span> op<span class=\"token punctuation\">:</span>\n            op<span class=\"token punctuation\">.</span>sendmsg_afalg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>ciphertext<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                             op<span class=\"token operator\">=</span>socket<span class=\"token punctuation\">.</span>ALG_OP_DECRYPT<span class=\"token punctuation\">,</span>\n                             iv<span class=\"token operator\">=</span>iv<span class=\"token punctuation\">)</span>\n            plaintext <span class=\"token operator\">=</span> op<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> upad<span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">)</span>\n\n\nkey <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span>\niv  <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\nplaintext <span class=\"token operator\">=</span> <span class=\"token string\">b\"Demo AF_ALG\"</span>\nciphertext <span class=\"token operator\">=</span> encrypt<span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">)</span>\nplaintext <span class=\"token operator\">=</span> decrypt<span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ python3 aes_cbc.py\n01910e4bd6932674dba9bebd4fdf6cf2\nb&#39;Demo AF_ALG&#39;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>AES-GCM encrypt/decrypt via AF_ALG</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># need python 3.6 or above &amp; Linux >=4.9</span>\n<span class=\"token keyword\">import</span> contextlib\n<span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> os\n\n@contextlib<span class=\"token punctuation\">.</span>contextmanager\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_alg</span><span class=\"token punctuation\">(</span>typ<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_ALG<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_SEQPACKET<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>typ<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> s\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">,</span> assoc<span class=\"token punctuation\">,</span> taglen<span class=\"token punctuation\">,</span> plaintext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\" doing aes-gcm encrypt\n\n    :param key: the aes symmetric key\n    :param iv: initial vector\n    :param assoc: associated data (integrity protection)\n    :param taglen: authenticator tag len\n    :param plaintext: plain text data\n    \"\"\"</span>\n\n    assoclen <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>assoc<span class=\"token punctuation\">)</span>\n    ciphertext <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    tag <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword\">with</span> create_alg<span class=\"token punctuation\">(</span><span class=\"token string\">'aead'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gcm(aes)'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> algo<span class=\"token punctuation\">:</span>\n        algo<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_ALG<span class=\"token punctuation\">,</span>\n                        socket<span class=\"token punctuation\">.</span>ALG_SET_KEY<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n        algo<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_ALG<span class=\"token punctuation\">,</span>\n                        socket<span class=\"token punctuation\">.</span>ALG_SET_AEAD_AUTHSIZE<span class=\"token punctuation\">,</span>\n                        <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n                        assoclen<span class=\"token punctuation\">)</span>\n\n        op<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> algo<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">with</span> op<span class=\"token punctuation\">:</span>\n            msg <span class=\"token operator\">=</span> assoc <span class=\"token operator\">+</span> plaintext\n            op<span class=\"token punctuation\">.</span>sendmsg_afalg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                             op<span class=\"token operator\">=</span>socket<span class=\"token punctuation\">.</span>ALG_OP_ENCRYPT<span class=\"token punctuation\">,</span>\n                             iv<span class=\"token operator\">=</span>iv<span class=\"token punctuation\">,</span>\n                             assoclen<span class=\"token operator\">=</span>assoclen<span class=\"token punctuation\">)</span>\n\n            res <span class=\"token operator\">=</span> op<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>assoclen <span class=\"token operator\">+</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> taglen<span class=\"token punctuation\">)</span>\n            ciphertext <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>assoclen<span class=\"token punctuation\">:</span><span class=\"token operator\">-</span>taglen<span class=\"token punctuation\">]</span>\n            tag <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>taglen<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> ciphertext<span class=\"token punctuation\">,</span> tag\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">,</span> assoc<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">,</span> ciphertext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\" doing aes-gcm decrypt\n\n    :param key: the AES symmetric key\n    :param iv: initial vector\n    :param assoc: associated data (integrity protection)\n    :param tag: the GCM authenticator tag\n    :param ciphertext: cipher text data\n    \"\"\"</span>\n    plaintext <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    assoclen <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>assoc<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">with</span> create_alg<span class=\"token punctuation\">(</span><span class=\"token string\">'aead'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gcm(aes)'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> algo<span class=\"token punctuation\">:</span>\n        algo<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_ALG<span class=\"token punctuation\">,</span>\n                        socket<span class=\"token punctuation\">.</span>ALG_SET_KEY<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n        algo<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_ALG<span class=\"token punctuation\">,</span>\n                        socket<span class=\"token punctuation\">.</span>ALG_SET_AEAD_AUTHSIZE<span class=\"token punctuation\">,</span>\n                        <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n                        assoclen<span class=\"token punctuation\">)</span>\n        op<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> algo<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">with</span> op<span class=\"token punctuation\">:</span>\n            msg <span class=\"token operator\">=</span> assoc <span class=\"token operator\">+</span> ciphertext <span class=\"token operator\">+</span> tag\n            op<span class=\"token punctuation\">.</span>sendmsg_afalg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                             op<span class=\"token operator\">=</span>socket<span class=\"token punctuation\">.</span>ALG_OP_DECRYPT<span class=\"token punctuation\">,</span> iv<span class=\"token operator\">=</span>iv<span class=\"token punctuation\">,</span>\n                             assoclen<span class=\"token operator\">=</span>assoclen<span class=\"token punctuation\">)</span>\n\n            taglen <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span>\n            res <span class=\"token operator\">=</span> op<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> taglen<span class=\"token punctuation\">)</span>\n            plaintext <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>assoclen<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> plaintext\n\nkey <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\niv  <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\nassoc <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\nplaintext <span class=\"token operator\">=</span> <span class=\"token string\">b\"Hello AES-GCM\"</span>\nciphertext<span class=\"token punctuation\">,</span> tag <span class=\"token operator\">=</span> encrypt<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">,</span> assoc<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> plaintext<span class=\"token punctuation\">)</span>\nplaintext <span class=\"token operator\">=</span> decrypt<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">,</span> assoc<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">,</span> ciphertext<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ python3 aes_gcm.py\n2e27b67234e01bcb0ab6b451f4f870ce\nb&#39;Hello AES-GCM&#39;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>AES-GCM encrypt/decrypt file with sendfile</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># need python 3.6 or above &amp; Linux >=4.9</span>\n<span class=\"token keyword\">import</span> contextlib\n<span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> os\n\n@contextlib<span class=\"token punctuation\">.</span>contextmanager\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_alg</span><span class=\"token punctuation\">(</span>typ<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_ALG<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_SEQPACKET<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>typ<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> s\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">,</span> assoc<span class=\"token punctuation\">,</span> taglen<span class=\"token punctuation\">,</span> pfile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    assoclen <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>assoc<span class=\"token punctuation\">)</span>\n    ciphertext <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    tag <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    pfd <span class=\"token operator\">=</span> pfile<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    st <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>fstat<span class=\"token punctuation\">(</span>pfd<span class=\"token punctuation\">)</span>\n    totalbytes <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span>st_size\n\n    <span class=\"token keyword\">with</span> create_alg<span class=\"token punctuation\">(</span><span class=\"token string\">'aead'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gcm(aes)'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> algo<span class=\"token punctuation\">:</span>\n        algo<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_ALG<span class=\"token punctuation\">,</span>\n                        socket<span class=\"token punctuation\">.</span>ALG_SET_KEY<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n        algo<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_ALG<span class=\"token punctuation\">,</span>\n                        socket<span class=\"token punctuation\">.</span>ALG_SET_AEAD_AUTHSIZE<span class=\"token punctuation\">,</span>\n                        <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n                        assoclen<span class=\"token punctuation\">)</span>\n\n        op<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> algo<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">with</span> op<span class=\"token punctuation\">:</span>\n            op<span class=\"token punctuation\">.</span>sendmsg_afalg<span class=\"token punctuation\">(</span>op<span class=\"token operator\">=</span>socket<span class=\"token punctuation\">.</span>ALG_OP_ENCRYPT<span class=\"token punctuation\">,</span>\n                             iv<span class=\"token operator\">=</span>iv<span class=\"token punctuation\">,</span>\n                             assoclen<span class=\"token operator\">=</span>assoclen<span class=\"token punctuation\">,</span>\n                             flags<span class=\"token operator\">=</span>socket<span class=\"token punctuation\">.</span>MSG_MORE<span class=\"token punctuation\">)</span>\n\n            op<span class=\"token punctuation\">.</span>sendall<span class=\"token punctuation\">(</span>assoc<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>MSG_MORE<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># using sendfile to encrypt file data</span>\n            os<span class=\"token punctuation\">.</span>sendfile<span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pfd<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> totalbytes<span class=\"token punctuation\">)</span>\n\n            res <span class=\"token operator\">=</span> op<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>assoclen <span class=\"token operator\">+</span> totalbytes <span class=\"token operator\">+</span> taglen<span class=\"token punctuation\">)</span>\n            ciphertext <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>assoclen<span class=\"token punctuation\">:</span><span class=\"token operator\">-</span>taglen<span class=\"token punctuation\">]</span>\n            tag <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>taglen<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> ciphertext<span class=\"token punctuation\">,</span> tag\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">,</span> assoc<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">,</span> ciphertext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    plaintext <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    assoclen <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>assoc<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">with</span> create_alg<span class=\"token punctuation\">(</span><span class=\"token string\">'aead'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gcm(aes)'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> algo<span class=\"token punctuation\">:</span>\n        algo<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_ALG<span class=\"token punctuation\">,</span>\n                        socket<span class=\"token punctuation\">.</span>ALG_SET_KEY<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n        algo<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_ALG<span class=\"token punctuation\">,</span>\n                        socket<span class=\"token punctuation\">.</span>ALG_SET_AEAD_AUTHSIZE<span class=\"token punctuation\">,</span>\n                        <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n                        assoclen<span class=\"token punctuation\">)</span>\n        op<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> algo<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">with</span> op<span class=\"token punctuation\">:</span>\n            msg <span class=\"token operator\">=</span> assoc <span class=\"token operator\">+</span> ciphertext <span class=\"token operator\">+</span> tag\n            op<span class=\"token punctuation\">.</span>sendmsg_afalg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                             op<span class=\"token operator\">=</span>socket<span class=\"token punctuation\">.</span>ALG_OP_DECRYPT<span class=\"token punctuation\">,</span> iv<span class=\"token operator\">=</span>iv<span class=\"token punctuation\">,</span>\n                             assoclen<span class=\"token operator\">=</span>assoclen<span class=\"token punctuation\">)</span>\n\n            taglen <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span>\n            res <span class=\"token operator\">=</span> op<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> taglen<span class=\"token punctuation\">)</span>\n            plaintext <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>assoclen<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> plaintext\n\nkey <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\niv  <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\nassoc <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"usage: cmd plain\"</span><span class=\"token punctuation\">)</span>\n    exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nplain <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>plain<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> pf<span class=\"token punctuation\">:</span>\n    ciphertext<span class=\"token punctuation\">,</span> tag <span class=\"token operator\">=</span> encrypt<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">,</span> assoc<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> pf<span class=\"token punctuation\">)</span>\n    plaintext <span class=\"token operator\">=</span> decrypt<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">,</span> assoc<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">,</span> ciphertext<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ echo &quot;Test AES-GCM with sendfile&quot; &gt; plain.txt\n$ python3 aes_gcm.py plain.txt\nb3800044520ed07fa7f20b29c2695bae9ab596065359db4f009dd6\nb&#39;Test AES-GCM with sendfile\\n&#39;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Compare the performance of AF_ALG to cryptography</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># need python 3.6 or above &amp; Linux >=4.9</span>\n<span class=\"token keyword\">import</span> contextlib\n<span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives<span class=\"token punctuation\">.</span>ciphers<span class=\"token punctuation\">.</span>aead <span class=\"token keyword\">import</span> AESGCM\n\n@contextlib<span class=\"token punctuation\">.</span>contextmanager\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_alg</span><span class=\"token punctuation\">(</span>typ<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_ALG<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_SEQPACKET<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>typ<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> s\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">,</span> assoc<span class=\"token punctuation\">,</span> taglen<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">,</span> pfile<span class=\"token punctuation\">,</span> psize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    assoclen <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>assoc<span class=\"token punctuation\">)</span>\n    ciphertext <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    tag <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    pfd <span class=\"token operator\">=</span> pfile<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    totalbytes <span class=\"token operator\">=</span> psize\n\n    op<span class=\"token punctuation\">.</span>sendmsg_afalg<span class=\"token punctuation\">(</span>op<span class=\"token operator\">=</span>socket<span class=\"token punctuation\">.</span>ALG_OP_ENCRYPT<span class=\"token punctuation\">,</span>\n                     iv<span class=\"token operator\">=</span>iv<span class=\"token punctuation\">,</span>\n                     assoclen<span class=\"token operator\">=</span>assoclen<span class=\"token punctuation\">,</span>\n                     flags<span class=\"token operator\">=</span>socket<span class=\"token punctuation\">.</span>MSG_MORE<span class=\"token punctuation\">)</span>\n\n    op<span class=\"token punctuation\">.</span>sendall<span class=\"token punctuation\">(</span>assoc<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>MSG_MORE<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># using sendfile to encrypt file data</span>\n    os<span class=\"token punctuation\">.</span>sendfile<span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pfd<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> totalbytes<span class=\"token punctuation\">)</span>\n\n    res <span class=\"token operator\">=</span> op<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>assoclen <span class=\"token operator\">+</span> totalbytes <span class=\"token operator\">+</span> taglen<span class=\"token punctuation\">)</span>\n    ciphertext <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>assoclen<span class=\"token punctuation\">:</span><span class=\"token operator\">-</span>taglen<span class=\"token punctuation\">]</span>\n    tag <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>taglen<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> ciphertext<span class=\"token punctuation\">,</span> tag\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">,</span> assoc<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">,</span> ciphertext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    plaintext <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    assoclen <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>assoc<span class=\"token punctuation\">)</span>\n\n    msg <span class=\"token operator\">=</span> assoc <span class=\"token operator\">+</span> ciphertext <span class=\"token operator\">+</span> tag\n    op<span class=\"token punctuation\">.</span>sendmsg_afalg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                     op<span class=\"token operator\">=</span>socket<span class=\"token punctuation\">.</span>ALG_OP_DECRYPT<span class=\"token punctuation\">,</span> iv<span class=\"token operator\">=</span>iv<span class=\"token punctuation\">,</span>\n                     assoclen<span class=\"token operator\">=</span>assoclen<span class=\"token punctuation\">)</span>\n\n    taglen <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span>\n    res <span class=\"token operator\">=</span> op<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> taglen<span class=\"token punctuation\">)</span>\n    plaintext <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>assoclen<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> plaintext\n\n\nkey <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\niv  <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\nassoc <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\nassoclen <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>assoc<span class=\"token punctuation\">)</span>\n\ncount <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span>\nplain <span class=\"token operator\">=</span> <span class=\"token string\">\"tmp.rand\"</span>\n\n<span class=\"token comment\"># crate a tmp file</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>plain<span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    f<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># profile AF_ALG with sendfile (zero-copy)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>plain<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> pf<span class=\"token punctuation\">,</span>\\\n     create_alg<span class=\"token punctuation\">(</span><span class=\"token string\">'aead'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gcm(aes)'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> enc_algo<span class=\"token punctuation\">,</span>\\\n     create_alg<span class=\"token punctuation\">(</span><span class=\"token string\">'aead'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gcm(aes)'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> dec_algo<span class=\"token punctuation\">:</span>\n\n    enc_algo<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_ALG<span class=\"token punctuation\">,</span>\n                        socket<span class=\"token punctuation\">.</span>ALG_SET_KEY<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n    enc_algo<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_ALG<span class=\"token punctuation\">,</span>\n                        socket<span class=\"token punctuation\">.</span>ALG_SET_AEAD_AUTHSIZE<span class=\"token punctuation\">,</span>\n                        <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n                        assoclen<span class=\"token punctuation\">)</span>\n\n    dec_algo<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_ALG<span class=\"token punctuation\">,</span>\n                        socket<span class=\"token punctuation\">.</span>ALG_SET_KEY<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n    dec_algo<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_ALG<span class=\"token punctuation\">,</span>\n                        socket<span class=\"token punctuation\">.</span>ALG_SET_AEAD_AUTHSIZE<span class=\"token punctuation\">,</span>\n                        <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n                        assoclen<span class=\"token punctuation\">)</span>\n\n    enc_op<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> enc_algo<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    dec_op<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> dec_algo<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    st <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>fstat<span class=\"token punctuation\">(</span>pf<span class=\"token punctuation\">.</span>fileno<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    psize <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span>st_size\n\n    <span class=\"token keyword\">with</span> enc_op<span class=\"token punctuation\">,</span> dec_op<span class=\"token punctuation\">:</span>\n\n        s <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            ciphertext<span class=\"token punctuation\">,</span> tag <span class=\"token operator\">=</span> encrypt<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">,</span> assoc<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> enc_op<span class=\"token punctuation\">,</span> pf<span class=\"token punctuation\">,</span> psize<span class=\"token punctuation\">)</span>\n            plaintext <span class=\"token operator\">=</span> decrypt<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">,</span> assoc<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">,</span> dec_op<span class=\"token punctuation\">,</span> ciphertext<span class=\"token punctuation\">)</span>\n\n        cost <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> s\n\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"total cost time: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>cost<span class=\"token punctuation\">}</span></span><span class=\"token string\">. [AF_ALG]\"</span></span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># profile cryptography (no zero-copy)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>plain<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> pf<span class=\"token punctuation\">:</span>\n\n    aesgcm <span class=\"token operator\">=</span> AESGCM<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\n    s <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        pf<span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        plaintext <span class=\"token operator\">=</span> pf<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        ciphertext <span class=\"token operator\">=</span> aesgcm<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">,</span> plaintext<span class=\"token punctuation\">,</span> assoc<span class=\"token punctuation\">)</span>\n        plaintext <span class=\"token operator\">=</span> aesgcm<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">,</span> ciphertext<span class=\"token punctuation\">,</span> assoc<span class=\"token punctuation\">)</span>\n\n    cost <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> s\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"total cost time: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>cost<span class=\"token punctuation\">}</span></span><span class=\"token string\">. [cryptography]\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># clean up</span>\nos<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>plain<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ python3 aes-gcm.py\ntotal cost time: 15.317010641098022. [AF_ALG]\ntotal cost time: 50.256704807281494. [cryptography]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>Sniffer IP packets</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> ctypes <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> struct\n\n<span class=\"token comment\"># ref: IP protocol numbers</span>\nPROTO_MAP <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"ICMP\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">2</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"IGMP\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">6</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"TCP\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">17</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"UDP\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">27</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"RDP\"</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">IP</span><span class=\"token punctuation\">(</span>Structure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">''' IP header Structure\n\n    In linux api, it define as below:\n\n    strcut ip {\n        u_char         ip_hl:4; /* header_len */\n        u_char         ip_v:4;  /* version */\n        u_char         ip_tos;  /* type of service */\n        short          ip_len;  /* total len */\n        u_short        ip_id;   /* identification */\n        short          ip_off;  /* offset field */\n        u_char         ip_ttl;  /* time to live */\n        u_char         ip_p;    /* protocol */\n        u_short        ip_sum;  /* checksum */\n        struct in_addr ip_src;  /* source */\n        struct in_addr ip_dst;  /* destination */\n    };\n    '''</span>\n    _fields_ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ip_hl\"</span> <span class=\"token punctuation\">,</span> c_ubyte<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 4 bit</span>\n                <span class=\"token punctuation\">(</span><span class=\"token string\">\"ip_v\"</span>  <span class=\"token punctuation\">,</span> c_ubyte<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 1 byte</span>\n                <span class=\"token punctuation\">(</span><span class=\"token string\">\"ip_tos\"</span><span class=\"token punctuation\">,</span> c_uint8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 2 byte</span>\n                <span class=\"token punctuation\">(</span><span class=\"token string\">\"ip_len\"</span><span class=\"token punctuation\">,</span> c_uint16<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 4 byte</span>\n                <span class=\"token punctuation\">(</span><span class=\"token string\">\"ip_id\"</span> <span class=\"token punctuation\">,</span> c_uint16<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 6 byte</span>\n                <span class=\"token punctuation\">(</span><span class=\"token string\">\"ip_off\"</span><span class=\"token punctuation\">,</span> c_uint16<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 8 byte</span>\n                <span class=\"token punctuation\">(</span><span class=\"token string\">\"ip_ttl\"</span><span class=\"token punctuation\">,</span> c_uint8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 9 byte</span>\n                <span class=\"token punctuation\">(</span><span class=\"token string\">\"ip_p\"</span>  <span class=\"token punctuation\">,</span> c_uint8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 10 byte</span>\n                <span class=\"token punctuation\">(</span><span class=\"token string\">\"ip_sum\"</span><span class=\"token punctuation\">,</span> c_uint16<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 12 byte</span>\n                <span class=\"token punctuation\">(</span><span class=\"token string\">\"ip_src\"</span><span class=\"token punctuation\">,</span> c_uint32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 16 byte</span>\n                <span class=\"token punctuation\">(</span><span class=\"token string\">\"ip_dst\"</span><span class=\"token punctuation\">,</span> c_uint32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>   <span class=\"token comment\"># 20 byte</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> buf<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> cls<span class=\"token punctuation\">.</span>from_buffer_copy<span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> buf<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        src <span class=\"token operator\">=</span> struct<span class=\"token punctuation\">.</span>pack<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;L\"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>ip_src<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>inet_ntoa<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span>\n        dst <span class=\"token operator\">=</span> struct<span class=\"token punctuation\">.</span>pack<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;L\"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>ip_dst<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dst <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>inet_ntoa<span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>proto <span class=\"token operator\">=</span> PROTO_MAP<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>ip_p<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} Not in map\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>ip_p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">raise</span>\n\nhost <span class=\"token operator\">=</span> <span class=\"token string\">'0.0.0.0'</span>\ns <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span>\n                  socket<span class=\"token punctuation\">.</span>SOCK_RAW<span class=\"token punctuation\">,</span>\n                  socket<span class=\"token punctuation\">.</span>IPPROTO_ICMP<span class=\"token punctuation\">)</span>\ns<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>IPPROTO_IP<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>IP_HDRINCL<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ns<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sniffer start...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        buf <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>recvfrom<span class=\"token punctuation\">(</span><span class=\"token number\">65535</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        ip_header <span class=\"token operator\">=</span> IP<span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{0}: {1} -> {2}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>ip_header<span class=\"token punctuation\">.</span>proto<span class=\"token punctuation\">,</span>\n                                       ip_header<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">,</span>\n                                       ip_header<span class=\"token punctuation\">.</span>dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span>\n    s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output: (bash 1)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">python sniffer.py\nSniffer start...\nICMP: 127.0.0.1 -&gt; 127.0.0.1\nICMP: 127.0.0.1 -&gt; 127.0.0.1\nICMP: 127.0.0.1 -&gt; 127.0.0.1</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output: (bash 2)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ ping -c 3 localhost\nPING localhost (127.0.0.1): 56 data bytes\n64 bytes from 127.0.0.1: icmp_seq=0 ttl=64 time=0.063 ms\n64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.087 ms\n64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.159 ms\n\n--- localhost ping statistics ---\n3 packets transmitted, 3 packets received, 0.0% packet loss\nround-trip min/avg/max/stddev = 0.063/0.103/0.159/0.041 ms</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Sniffer TCP packet</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python3.6</span>\n<span class=\"token triple-quoted-string string\">\"\"\"\nBased on RFC-793, the following figure shows the TCP header format:\n\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|          Source Port          |       Destination Port        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                        Sequence Number                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Acknowledgment Number                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Data |           |U|A|P|R|S|F|                               |\n| Offset| Reserved  |R|C|S|S|Y|I|            Window             |\n|       |           |G|K|H|T|N|N|                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|           Checksum            |         Urgent Pointer        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Options                    |    Padding    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                             data                              |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nIn linux api (uapi/linux/tcp.h), it defines the TCP header:\n\nstruct tcphdr {\n    __be16  source;\n    __be16  dest;\n    __be32  seq;\n    __be32  ack_seq;\n#if defined(__LITTLE_ENDIAN_BITFIELD)\n    __u16   res1:4,\n            doff:4,\n            fin:1,\n            syn:1,\n            rst:1,\n            psh:1,\n            ack:1,\n            urg:1,\n            ece:1,\n            cwr:1;\n#elif defined(__BIG_ENDIAN_BITFIELD)\n    __u16   doff:4,\n            res1:4,\n            cwr:1,\n            ece:1,\n            urg:1,\n            ack:1,\n            psh:1,\n            rst:1,\n            syn:1,\n            fin:1;\n#else\n#error      \"Adjust your &lt;asm/byteorder.h> defines\"\n#endif\n    __be16  window;\n    __sum16 check;\n    __be16  urg_ptr;\n};\n\"\"\"</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> platform\n\n<span class=\"token keyword\">from</span> struct <span class=\"token keyword\">import</span> unpack\n<span class=\"token keyword\">from</span> contextlib <span class=\"token keyword\">import</span> contextmanager\n\nun <span class=\"token operator\">=</span> platform<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> un <span class=\"token operator\">!=</span> <span class=\"token string\">\"Linux\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>un<span class=\"token punctuation\">}</span></span><span class=\"token string\"> is not supported!\"</span></span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n@contextmanager\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">''' Create a TCP raw socket '''</span>\n    s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span>\n                      socket<span class=\"token punctuation\">.</span>SOCK_RAW<span class=\"token punctuation\">,</span>\n                      socket<span class=\"token punctuation\">.</span>IPPROTO_TCP<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> s\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> create_socket<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> s<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            pkt<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>recvfrom<span class=\"token punctuation\">(</span><span class=\"token number\">65535</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># the first 20 bytes are ip header</span>\n            iphdr <span class=\"token operator\">=</span> unpack<span class=\"token punctuation\">(</span><span class=\"token string\">'!BBHHHBBH4s4s'</span><span class=\"token punctuation\">,</span> pkt<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            iplen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>iphdr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span>\n\n            <span class=\"token comment\"># the next 20 bytes are tcp header</span>\n            tcphdr <span class=\"token operator\">=</span> unpack<span class=\"token punctuation\">(</span><span class=\"token string\">'!HHLLBBHHH'</span><span class=\"token punctuation\">,</span> pkt<span class=\"token punctuation\">[</span>iplen<span class=\"token punctuation\">:</span>iplen<span class=\"token operator\">+</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            source <span class=\"token operator\">=</span> tcphdr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            dest <span class=\"token operator\">=</span> tcphdr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            seq <span class=\"token operator\">=</span> tcphdr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n            ack_seq <span class=\"token operator\">=</span> tcphdr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n            dr <span class=\"token operator\">=</span> tcphdr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n            flags <span class=\"token operator\">=</span> tcphdr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n            window <span class=\"token operator\">=</span> tcphdr<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n            check <span class=\"token operator\">=</span> tcphdr<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n            urg_ptr <span class=\"token operator\">=</span> tcphdr<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n\n            doff <span class=\"token operator\">=</span> dr <span class=\"token operator\">>></span> <span class=\"token number\">4</span>\n            fin <span class=\"token operator\">=</span> flags <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x01</span>\n            syn <span class=\"token operator\">=</span> flags <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x02</span>\n            rst <span class=\"token operator\">=</span> flags <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x04</span>\n            psh <span class=\"token operator\">=</span> flags <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x08</span>\n            ack <span class=\"token operator\">=</span> flags <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x10</span>\n            urg <span class=\"token operator\">=</span> flags <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x20</span>\n            ece <span class=\"token operator\">=</span> flags <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x40</span>\n            cwr <span class=\"token operator\">=</span> flags <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x80</span>\n\n            tcplen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>doff<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span>\n            h_size <span class=\"token operator\">=</span> iplen <span class=\"token operator\">+</span> tcplen\n\n            <span class=\"token comment\">#get data from the packet</span>\n            data <span class=\"token operator\">=</span> pkt<span class=\"token punctuation\">[</span>h_size<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> data<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------ TCP_HEADER --------------\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Source Port:           </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>source<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Destination Port:      </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>dest<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Sequence Number:       </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>seq<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Acknowledgment Number: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>ack_seq<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Data offset:           </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>doff<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"FIN:                   </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fin<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"SYN:                   </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>syn<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"RST:                   </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>rst<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"PSH:                   </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>psh<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"ACK:                   </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>ack<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"URG:                   </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>urg<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"ECE:                   </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>ece<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"CWR:                   </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>cwr<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Window:                </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>window<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Checksum:              </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>check<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Urgent Point:          </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>urg_ptr<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------- DATA -----------------\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ python3.6 tcp.py\n------------ TCP_HEADER --------------\nSource Port:           38352\nDestination Port:      8000\nSequence Number:       2907801591\nAcknowledgment Number: 398995857\nData offset:           8\nFIN:                   0\nSYN:                   0\nRST:                   0\nPSH:                   8\nACK:                   16\nURG:                   0\nECE:                   0\nCWR:                   0\nWindow:                342\nChecksum:              65142\nUrgent Point:          0\n--------------- DATA -----------------\nb&#39;GET / HTTP/1.1\\r\\nHost: localhost:8000\\r\\nUser-Agent: curl/7.47.0\\r\\nAccept: */*\\r\\n\\r\\n&#39;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Sniffer ARP packet</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\nEhternet Packet Header\n\nstruct ethhdr {\n    unsigned char h_dest[ETH_ALEN];   /* destination eth addr */\n    unsigned char h_source[ETH_ALEN]; /* source ether addr    */\n    __be16        h_proto;            /* packet type ID field */\n} __attribute__((packed));\n\nARP Packet Header\n\nstruct arphdr {\n    uint16_t htype;    /* Hardware Type           */\n    uint16_t ptype;    /* Protocol Type           */\n    u_char   hlen;     /* Hardware Address Length */\n    u_char   plen;     /* Protocol Address Length */\n    uint16_t opcode;   /* Operation Code          */\n    u_char   sha[6];   /* Sender hardware address */\n    u_char   spa[4];   /* Sender IP address       */\n    u_char   tha[6];   /* Target hardware address */\n    u_char   tpa[4];   /* Target IP address       */\n};\n\"\"\"</span>\n\n<span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> struct\n<span class=\"token keyword\">import</span> binascii\n\nrawSocket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_PACKET<span class=\"token punctuation\">,</span>\n                          socket<span class=\"token punctuation\">.</span>SOCK_RAW<span class=\"token punctuation\">,</span>\n                          socket<span class=\"token punctuation\">.</span>htons<span class=\"token punctuation\">(</span><span class=\"token number\">0x0003</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n\n    packet <span class=\"token operator\">=</span> rawSocket<span class=\"token punctuation\">.</span>recvfrom<span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">)</span>\n    ethhdr <span class=\"token operator\">=</span> packet<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span>\n    eth <span class=\"token operator\">=</span> struct<span class=\"token punctuation\">.</span>unpack<span class=\"token punctuation\">(</span><span class=\"token string\">\"!6s6s2s\"</span><span class=\"token punctuation\">,</span> ethhdr<span class=\"token punctuation\">)</span>\n\n    arphdr <span class=\"token operator\">=</span> packet<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">:</span><span class=\"token number\">42</span><span class=\"token punctuation\">]</span>\n    arp <span class=\"token operator\">=</span> struct<span class=\"token punctuation\">.</span>unpack<span class=\"token punctuation\">(</span><span class=\"token string\">\"2s2s1s1s2s6s4s6s4s\"</span><span class=\"token punctuation\">,</span> arphdr<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># skip non-ARP packets</span>\n    ethtype <span class=\"token operator\">=</span> eth<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> ethtype <span class=\"token operator\">!=</span> <span class=\"token string\">'\\x08\\x06'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">continue</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------- ETHERNET_FRAME -------------\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dest MAC:        \"</span><span class=\"token punctuation\">,</span> binascii<span class=\"token punctuation\">.</span>hexlify<span class=\"token punctuation\">(</span>eth<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Source MAC:      \"</span><span class=\"token punctuation\">,</span> binascii<span class=\"token punctuation\">.</span>hexlify<span class=\"token punctuation\">(</span>eth<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Type:            \"</span><span class=\"token punctuation\">,</span> binascii<span class=\"token punctuation\">.</span>hexlify<span class=\"token punctuation\">(</span>ethtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------- ARP_HEADER ----------------\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hardware type:   \"</span><span class=\"token punctuation\">,</span> binascii<span class=\"token punctuation\">.</span>hexlify<span class=\"token punctuation\">(</span>arp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Protocol type:   \"</span><span class=\"token punctuation\">,</span> binascii<span class=\"token punctuation\">.</span>hexlify<span class=\"token punctuation\">(</span>arp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hardware size:   \"</span><span class=\"token punctuation\">,</span> binascii<span class=\"token punctuation\">.</span>hexlify<span class=\"token punctuation\">(</span>arp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Protocol size:   \"</span><span class=\"token punctuation\">,</span> binascii<span class=\"token punctuation\">.</span>hexlify<span class=\"token punctuation\">(</span>arp<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Opcode:          \"</span><span class=\"token punctuation\">,</span> binascii<span class=\"token punctuation\">.</span>hexlify<span class=\"token punctuation\">(</span>arp<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Source MAC:      \"</span><span class=\"token punctuation\">,</span> binascii<span class=\"token punctuation\">.</span>hexlify<span class=\"token punctuation\">(</span>arp<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Source IP:       \"</span><span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>inet_ntoa<span class=\"token punctuation\">(</span>arp<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dest MAC:        \"</span><span class=\"token punctuation\">,</span> binascii<span class=\"token punctuation\">.</span>hexlify<span class=\"token punctuation\">(</span>arp<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dest IP:         \"</span><span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>inet_ntoa<span class=\"token punctuation\">(</span>arp<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------------\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ python arp.py\n-------------- ETHERNET_FRAME -------------\nDest MAC:         ffffffffffff\nSource MAC:       f0257252f5ca\nType:             0806\n--------------- ARP_HEADER ----------------\nHardware type:    0001\nProtocol type:    0800\nHardware size:    06\nProtocol size:    04\nOpcode:           0001\nSource MAC:       f0257252f5ca\nSource IP:        140.112.91.254\nDest MAC:         000000000000\nDest IP:          140.112.91.20\n-------------------------------------------</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"https://www.pythonsheets.com/\">Acesse a Referência original 1:</a>\n<a href=\"https://www.pythoncheatsheet.org/\">Acesse a Referência original 2:</a></p>","frontmatter":{"title":"Python tudo sobre Sockets","date":"January 05, 2020","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/python-socket/","previous":{"fields":{"slug":"/average_by/"},"frontmatter":{"title":"Python como usar o average_by"}},"next":{"fields":{"slug":"/python-concurrency/"},"frontmatter":{"title":"Python tudo sobre Concurrency"}}}}}